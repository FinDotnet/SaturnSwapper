@inject IFortniteAPIService _fortniteAPIService
@inject ISwapperService _swapperService
@inject IDiscordRPCService _discordRPCService
@inject IConfigService _configService
@inject IJSRuntime _jsRuntime
@inject ISaturnAPIService _saturnAPIService

@page "/"
@using System.Net
@using DiscordRPC
@using System.Net.NetworkInformation
@using Saturn.Backend.Core.Enums
@using Saturn.Backend.Core.Models.FortniteAPI
@using Saturn.Backend.Core.Services
@using System.IO
@using Saturn.Backend.Core.Models.Items
@using Saturn.Backend.Core.Utils
@using System.Diagnostics
@using System.Globalization
@using System.Runtime.ExceptionServices
@using System.Text.RegularExpressions
@using MudBlazor
@using Newtonsoft.Json
@using Saturn.Backend.Core.Models.SaturnAPI
@using Saturn.Backend.Core.Utils.ReadPlugins
@using Colors = Saturn.Backend.Core.Enums.Colors
@using System.Windows
@using System.Windows.Media
@using Newtonsoft.Json.Linq
@inherits LayoutComponentBase

<body>
<main>
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
        @if (_saturnState == SaturnState.S_Maintenance)
        {
            <img src="img/Maintenance.png" alt="We are in maintenance right now! Check Discord for further updates!" style='background-position: center; width: 50%; height: 50%; border-radius: 5%; background-repeat: no-repeat;'/>
        }
        else if (_saturnState == SaturnState.S_Update)
        {
            <img src @onerror=@(async() => await RunUpdate())>
        }
        else if (_saturnState == SaturnState.S_Key)
        {
            <input type="text" class="key" placeholder="Enter key here" @oninput=@(async(e) => await CheckKey(e.Value.ToString()))>
        }
        else
        {
            <section class="glass">
                <div class="dashboard">
                <div class="user">
                    @if (Username == null)
                    {
                        <img class="avatar" src="https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/icon.png" alt="Discord Avatar"/>
                        <h3>Renegade Raider</h3>
                    }
                    else
                    {
                        <img class="avatar" src="@Avatar" alt="Discord Avatar"/>
                        <h3>@Username</h3>
                    }

                    @if (Config.isBeta)
                    {
                        <p>Beta User</p>
                    }
                    else
                    {
                        <p>Free User</p>
                    }
                </div>
                <div class="options" style="cursor: pointer">
                    <div class="option" @onclick=@(async() => await GetSaturnSkins())>
                        <img src="img/UI/skins.png" alt="">
                        <h2>Skins</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GetSaturnBackblings())>
                        <img src="img/UI/backblings.png" alt="">
                        <h2>Backblings</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GetSaturnPickaxes())>
                        <img src="img/UI/pickaxes.png" alt="">
                        <h2>Pickaxes</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GetSaturnEmotes())>
                        <img src="img/UI/emotes.png" alt="">
                        <h2>Emotes</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GetSaturnMisc())>
                        <img src="img/UI/extra.png" alt="">
                        <h2>Misc</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GoToSettings())>
                        <img src="img/UI/settings.png" alt="">
                        <h2>Settings</h2>
                    </div>

                </div>
            </div>
                <div class="items">
                @if (_saturnState != SaturnState.S_Settings && _saturnState != SaturnState.S_Dash && _saturnState != SaturnState.S_Error && !_saturnState.ToString().Contains("Preset"))
                {
                    <input class="iteminput" type="text" placeholder="Search" style="text-indent: 10px; color:grey;" @oninput="@(async change => {await FilterItems(change.Value.ToString()); })"/>
                    
                    <select class="dropdown" name="searchType" id="searchType">
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_Name)) value="name">Name</option>
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_ID)) value="id">ID</option>
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_Set)) value="set">Set</option>
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_Season)) value="season">Season</option>
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_Rarity)) value="rarity">Rarity</option>
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_Series)) value="series">Series</option>
                        <option @onselect=@(async() => await SetSearchType(SearchType.ST_Source)) value="source">Source</option>
                    </select>
                }
                
                @if (_saturnState == SaturnState.S_Loading)
                {
                    <div class="container" style="overflow: hidden;">
                        <div class="loader" style="    border: 16px solid transparent;
                                                                       border-top: 16px solid #8575cc; /* Blue */
                                                                       border-radius: 50%;
                                                                       background: #1d1f21;
                                                                       width: 120px;
                                                                       height: 120px;
                                                                       animation: spin 2s linear infinite;
                                                                       position: relative;
                                                                       margin-left:30%;">

                        </div>
                        <div class="loading">
                            <img class="loading" src="img/Saturn.png" alt="" style="width: 100px;
                                                                                                        height: 100px;
                                                                                                        position: relative;
                                                                                                        border-radius: 50%;
                                                                                                        margin-left:-48.5%;
                                                                                                        z-index: 100;
                                                                                                        margin-top: 8%"/>
                            <h2 style="margin-left: -165%; margin-top: 15%; white-space: nowrap; text-align: center">Please Wait</h2>
                            <p style="margin-left: -155%; white-space: nowrap; text-align: center">The swapper is generating the cosmetics...</p>
                        </div>
                    </div>
                }
                else if (_saturnState == SaturnState.S_Items)
                {
                    <div class="container">
                        @foreach (var item in _tabs[_tabIndex])
                        {
                            if (!item.IsPickingStyles)
                            {
                                <div class="card" id="item-@item.Id" @onclick=@(async () => { await SwitchItemStyleChoice(item); await SetCosmeticOptions(item);})>
                                    @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                    {
                                        <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                    }
                                    else
                                    {
                                        <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                    }
                                    
                                    @if (_showIcons)
                                    {
                                        <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                    }
                                    <div class="card-info">
                                        @if (item.IsConverted)
                                        {
                                            <h2 style="color: green; font-size: @GetTextSize(item.Name, true);">@item.Name</h2>
                                            <p style="color: green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                        }
                                        else
                                        {
                                            <h2 style="font-size: @GetTextSize(item.Name, true);">@item.Name</h2>
                                            switch (item.PrintColor)
                                            {
                                                case Colors.C_WHITE:
                                                    <p style="color:white; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_YELLOW:
                                                    <p style="color:yellow; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_RED:
                                                    <p style="color:red; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_GREEN:
                                                    <p style="color:green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                            }
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                    @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                    {
                                        <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                    }
                                    else
                                    {
                                        <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                    }
                                    
                                    @if (_showIcons)
                                    {
                                        <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                    }
                                    <div class="card-info">
                                        @if (item.IsConverted)
                                        {
                                            <h2 style="color: green; font-size: @GetTextSize(item.Name, true);">@item.Name</h2>
                                            <p style="color: green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                        }
                                        else
                                        {
                                            <h2 style="font-size: @GetTextSize(item.Name, true);">@item.Name</h2>
                                            switch (item.PrintColor)
                                            {
                                                case Colors.C_WHITE:
                                                    <p style="color:white; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_YELLOW:
                                                    <p style="color:yellow; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_RED:
                                                    <p style="color:red; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_GREEN:
                                                    <p style="color:green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                            }
                                        }
                                    </div>

                                    @foreach (var option in _skinOptions)
                                    {
                                        <div style="cursor: help" @onclick=@(async () => await _swapperService.Swap(item, option, currentType, _items, false))>
                                            @if (option.Series != null)
                                            {
                                                <img class="base" src="img/Series/@(option.Series).png" alt=""/>
                                            }
                                            else
                                            {
                                                <img class="base" src="img/Rarity/@(option.Rarity.ToLower()).png" alt=""/>
                                            }

                                            @if (_showIcons)
                                            {
                                                <img class="icon" src="@option.Icon" alt=""/>
                                            }
                                            <div class="card-info">
                                                @if (option.IsConverted)
                                                {
                                                    <h2 style="color: green; font-size: @GetTextSize(option.Name);">@option.Name</h2>
                                                    <p style="color: green; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                }
                                                else
                                                {
                                                    <h2>@option.Name</h2>
                                                    switch (option.PrintColor)
                                                    {
                                                        case Colors.C_WHITE:
                                                            <p style="color:white; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;
                                                        case Colors.C_YELLOW:
                                                            <p style="color:yellow; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;
                                                        case Colors.C_RED:
                                                            <p style="color:red; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;
                                                        case Colors.C_GREEN:
                                                            <p style="color:green; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;

                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                </div>
                            }
                        }
                        @if (_tabIndex > 0)
                        {
                            <div class="card" @onclick=@(() => { _tabIndex--; _saturnState = SaturnState.S_Items; })>
                                <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize("Back", true);">Back</h2>
                                    <p style="color:white; font-size: @GetTextSize("Sends you to the previous tab.")">Sends you to the previous tab.</p>
                                </div>
                            </div>
                        }
                        @if (_tabIndex < _tabCount)
                        {
                            <div class="card" @onclick=@(() => { _tabIndex++; _saturnState = SaturnState.S_Items; })>
                                <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize("Next", true);">Next</h2>
                                    <p style="color:white; font-size: @GetTextSize("Sends you to the next tab.")">Sends you to the next tab.</p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (_saturnState == SaturnState.S_Misc)
                {
                    <div class="container">
                        @if (_configService.ConfigFile.IsLobbyBackgroundConverted)
                        {
                            <div class="card" @onclick=@(async () => await RevertLobbyBG())>
                                <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize("Lobby BG", true);">Lobby BG</h2>
                                    <p style="color:green; font-size: @GetTextSize("MAKE SURE YOU HAVE AN IMAGE TO REPLACE THE BACKGROUND WITH IN THE SATURN EXE DIRECTORY");">MAKE SURE YOU HAVE AN IMAGE TO REPLACE THE BACKGROUND WITH IN THE SATURN EXE DIRECTORY</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card" @onclick=@(async () => await SwapLobbyBG())>
                                <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize("Lobby BG", true);">Lobby BG</h2>
                                    <p style="color:white; font-size: @GetTextSize("MAKE SURE YOU HAVE AN IMAGE TO REPLACE THE BACKGROUND WITH IN THE SATURN EXE DIRECTORY");">MAKE SURE YOU HAVE AN IMAGE TO REPLACE THE BACKGROUND WITH IN THE SATURN EXE DIRECTORY</p>
                                </div>
                            </div>
                        }
                        <div class="card" @onclick=@(() => _saturnState = SaturnState.S_Plugins)>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Add plugin", true);">Add plugin</h2>
                                <p style="color:white; font-size: @GetTextSize("Be able to use your own swaps.")">Be able to use your own swaps.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(async() => await GetSaturnPresets())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Presets", true);">Presets</h2>
                                <p style="color:white; font-size: @GetTextSize("Be able to save your swaps.")">Be able to save your swaps.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(() => _saturnState = SaturnState.S_LobbyPick)>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Lobby Swapper", true);">Lobby Swapper</h2>
                                <p style="color:white; font-size: @GetTextSize("Swap items in LOBBY ONLY, but everyone can see them.")">Swap items in LOBBY ONLY, but everyone can see them.</p>
                            </div>
                        </div>

                        @foreach (var item in _items)
                        {
                            if (!item.IsPickingStyles)
                            {
                                <div class="card" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                    @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                    {
                                        <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                    }
                                    else
                                    {
                                        <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                    }

                                    <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                    <div class="card-info">
                                        @if (item.IsConverted)
                                        {
                                            <h2 style="color: green; font-size: @GetTextSize(item.Name);">@item.Name</h2>
                                            <p style="color: green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                        }
                                        else
                                        {
                                            <h2 style="font-size: @GetTextSize(item.Name);">@item.Name</h2>
                                            switch (item.PrintColor)
                                            {
                                                case Colors.C_WHITE:
                                                    <p style="color:white; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_YELLOW:
                                                    <p style="color:yellow; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_RED:
                                                    <p style="color:red; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_GREEN:
                                                    <p style="color:green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                            }
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                    @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                    {
                                        <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                    }
                                    else
                                    {
                                        <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                    }

                                    @if (item.StreamImage != null)
                                    {
                                        <img class="icon" src="data:image/png;base64," + @Convert.ToBase64String(item.StreamImage.ToArray(), 0, item.StreamImage.ToArray().Length); alt=""/>
                                    }
                                    else
                                    {
                                        <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                    }
                                    <div class="card-info">
                                        @if (item.IsConverted)
                                        {
                                            <h2 style="color: green; font-size: @GetTextSize(item.Name);">@item.Name</h2>
                                            <p style="color: green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                        }
                                        else
                                        {
                                            <h2>@item.Name</h2>
                                            switch (item.PrintColor)
                                            {
                                                case Colors.C_WHITE:
                                                    <p style="color:white; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_YELLOW:
                                                    <p style="color:yellow; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_RED:
                                                    <p style="color:red; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                                case Colors.C_GREEN:
                                                    <p style="color:green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                                    break;
                                            }
                                        }
                                    </div>

                                    @foreach (var option in item.CosmeticOptions)
                                    {
                                        <div style="cursor: help" @onclick=@(async () => await _swapperService.Swap(item, option, currentType, _items, false))>
                                            @if (option.Series != null)
                                            {
                                                <img class="base" src="img/Series/@(option.Series).png" alt=""/>
                                            }
                                            else
                                            {
                                                <img class="base" src="img/Rarity/@(option.Rarity.ToLower()).png" alt=""/>
                                            }

                                            <img class="icon" src="@option.Icon" alt=""/>
                                            <div class="card-info">
                                                @if (option.IsConverted)
                                                {
                                                    <h2 style="color: green; font-size: @GetTextSize(option.Name);">@option.Name</h2>
                                                    <p style="color: green; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                }
                                                else
                                                {
                                                    <h2>@option.Name</h2>
                                                    switch (option.PrintColor)
                                                    {
                                                        case Colors.C_WHITE:
                                                            <p style="color:white; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;
                                                        case Colors.C_YELLOW:
                                                            <p style="color:yellow; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;
                                                        case Colors.C_RED:
                                                            <p style="color:red; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;
                                                        case Colors.C_GREEN:
                                                            <p style="color:green; font-size: @GetTextSize(option.Description);">@option.Description</p>
                                                            break;

                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                </div>
                            }
                        }

                    </div>
                }
                else if (_saturnState == SaturnState.S_PresetsMain)
                {
                    <div class="container">
                        <div class="card" @onclick=@(() => _saturnState = SaturnState.S_PresetConfiguration)>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Create", true);">Create</h2>
                                <p style="color:white; font-size: @GetTextSize("Brings you to the save configuration.")">Brings you to the save configuration.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(async () => await LoadPresets())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Presets", true);">Presets</h2>
                                <p style="color:white; font-size: @GetTextSize("Shows all of your presets.")">Shows all of your presets.</p>
                            </div>
                        </div>
                    </div>
                }
                else if (_saturnState == SaturnState.S_PresetConfiguration)
                {
                    <div class="container">
                        @if (_currentPreset is not null)
                        {
                            <input class="textbox" type="text" placeholder=@_currentName style=" color:white; " @oninput="@(async change => { _currentName = change.Value.ToString(); })"/>
                        }
                        else
                        {
                            <input class="textbox" type="text" placeholder="Name" style=" color:white; " @oninput="@(async change => { _currentName = change.Value.ToString(); })"/>
                        }
                        <div class="card" @onclick=@(async () => await SavePreset())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Save", true);">Save</h2>
                                <p style="color:white; font-size: @GetTextSize("Save the current preset.")">Save the current preset.</p>
                            </div>
                        </div>
                        @if (_currentPreset is not null)
                        {
                            <div class="card" @onclick=@(async () => await DeletePreset())>
                                <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize("Delete", true);">Delete</h2>
                                    <p style="color:white; font-size: @GetTextSize("Delete the current preset.")">Delete the current preset.</p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (_saturnState == SaturnState.S_Presets)
                {
                    <div class="container">
                        @foreach (var preset in _presets)
                        {
                            <div class="card" @onclick=@(() => { _saturnState = SaturnState.S_Preset; _currentPreset = preset.Value; _currentName = preset.Key; })>
                                <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                                <div class="card-info">
                                    @if (preset.Value.IsConverted)
                                    {
                                        <h2 style="color: green;">@preset.Key</h2>
                                    }
                                    else
                                    {
                                        <h2 style="color: white" >@preset.Key</h2>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (_saturnState == SaturnState.S_Preset)
                {
                    <div class="container">
                        <div class="card" @onclick=@(async() => await SwapPreset())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Swap", true);">Swap</h2>
                                <p style="color:white; font-size: @GetTextSize("Swaps the current preset.")">Swaps the current preset.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(async() => await EditPreset())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Configure", true);">Configure</h2>
                                <p style="color:white; font-size: @GetTextSize("Sends you to the configuration for the current preset.")">Sends you to the configuration for the current preset.</p>
                            </div>
                        </div>
                    </div>
                    
                }
                else if (_saturnState == SaturnState.S_Plugins)
                {
                    <h2 class="plugins">Put plugins in the directory with the Saturn exe</h2>
                    <h2 style="margin-top: 10%;" class="plugins">then press the button below to add them!</h2>
                    
                    <button @onclick=@(async() => await SubmitPlugin()) class="PluginButton">Check Plugins</button>
                }
                else if (_saturnState == SaturnState.S_Dash)
                {
                    <div class="maindash">
                        <h2>Welcome to Saturn!</h2>
                        <p>To start, press the button on the left side of the screen corresponding to the item category you want to swap!</p>
                    </div>
                }
                else if (_saturnState == SaturnState.S_Error)
                {
                    <img src @onerror=@(async() => await RunError())>
                }
                else if (_saturnState == SaturnState.S_Settings)
                {
                    <div class="container">
                        <div class="card" @onclick=@(async () => await RemoveDupedFiles())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Remove Duped UCAS", true);">Remove Duped UCAS</h2>
                                @switch (_removeDupedColor)
                                {
                                    case Colors.C_WHITE:
                                        <p style="color:white;font-size: @GetTextSize(_removeDuped);">@_removeDuped</p>
                                        break;
                                    case Colors.C_GREEN:
                                        <p style="color:green;font-size: @GetTextSize(_removeDuped);">@_removeDuped</p>
                                        break;
                                    case Colors.C_YELLOW:
                                        <p style="color:yellow;font-size: @GetTextSize(_removeDuped);">@_removeDuped</p>
                                        break;
                                    case Colors.C_RED:
                                        <p style="color:red;font-size: @GetTextSize(_removeDuped);">@_removeDuped</p>
                                        break;
                                }
                            </div>
                        </div>

                        <div class="card" @onclick=@(async () => await ResetConfiguration())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Reset config", true);">Reset config</h2>
                                @switch (_resetConfigColor)
                                {
                                    case Colors.C_WHITE:
                                        <p style="color:white;font-size: @GetTextSize(_resetConfig);">@_resetConfig</p>
                                        break;
                                    case Colors.C_GREEN:
                                        <p style="color:green;font-size: @GetTextSize(_resetConfig);">@_resetConfig</p>
                                        break;
                                    case Colors.C_YELLOW:
                                        <p style="color:yellow;font-size: @GetTextSize(_resetConfig);">@_resetConfig</p>
                                        break;
                                    case Colors.C_RED:
                                        <p style="color:red;font-size: @GetTextSize(_resetConfig);">@_resetConfig</p>
                                        break;
                                }
                            </div>
                        </div>

                        <div class="card" @onclick=@(async () => await Launch())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Launch Fortnite", true);">Launch Fortnite</h2>
                                @switch (_launchFortniteColor)
                                {
                                    case Colors.C_WHITE:
                                        <p style="color:white; font-size: @GetTextSize(_launchFortnite);">@_launchFortnite</p>
                                        break;
                                    case Colors.C_GREEN:
                                        <p style="color:green; font-size: @GetTextSize(_launchFortnite);">@_launchFortnite</p>
                                        break;
                                    case Colors.C_YELLOW:
                                        <p style="color:yellow; font-size: @GetTextSize(_launchFortnite);">@_launchFortnite</p>
                                        break;
                                    case Colors.C_RED:
                                        <p style="color:red; font-size: @GetTextSize(_launchFortnite);">@_launchFortnite</p>
                                        break;
                                }
                            </div>
                        </div>
                        
                        <div class="card" @onclick=@(async () => await OpenLog())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Open Newest Log");">Open Newest Log</h2>
                                @switch (_openLogColor)
                                {
                                    case Colors.C_WHITE:
                                        <p style="color:white; font-size: @GetTextSize(_openLogFile);">@_openLogFile</p>
                                        break;
                                    case Colors.C_GREEN:
                                        <p style="color:green; font-size: @GetTextSize(_openLogFile);">@_openLogFile</p>
                                        break;
                                    case Colors.C_YELLOW:
                                        <p style="color:yellow; font-size: @GetTextSize(_openLogFile);">@_openLogFile</p>
                                        break;
                                    case Colors.C_RED:
                                        <p style="color:red; font-size: @GetTextSize(_openLogFile);">@_openLogFile</p>
                                        break;
                                }
                            </div>
                        </div>

                        <div class="card" @onclick=@(async () => await ToggleShowStyles())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Show Styles", true);">Show Styles</h2>
                                <p style="color:white; font-size: @GetTextSize(_showStyles);">@_showStyles</p>
                            </div>
                        </div>

                        <div class="card" @onclick=@(async () => { if (Directory.Exists(Config.PluginsPath)) Directory.Delete(Config.PluginsPath, true); await _jsRuntime.InvokeVoidAsync("MessageBox", "Success", "Finished removing all plugins!", "success"); })>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Removes plugins", true);">Remove plugins</h2>
                                <p style="color:white; font-size: @GetTextSize("Removes all plugins");">Removes all plugins</p>
                            </div>
                        </div>
                        
                        <div class="card" @onclick=@(async () => await GetCurrentlySwapped())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Get converted items", true);">Get converted items</h2>
                                <p style="color:white; font-size: @GetTextSize("Returns your currently converted items in a list");">Returns your currently converted items in a list</p>
                            </div>
                        </div>
                        
                        <div class="card" @onclick=@(async () => await Uninstall())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Uninstall", true);">Uninstall</h2>
                                <p style="color:white; font-size: @GetTextSize("Deletes all Saturn files");">Deletes all Saturn files</p>
                            </div>
                        </div>
                        
                        <div class="card" @onclick=@(async () => await ToggleIcons())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Toggle Fortnite Icons", true);">Toggle Fortnite Icons</h2>
                                @switch (_toggleIconsColor)
                                {
                                    case Colors.C_WHITE:
                                        <p style="color:white; font-size: @GetTextSize(_toggleIcons);">@_toggleIcons</p>
                                        break;
                                    case Colors.C_GREEN:
                                        <p style="color:green; font-size: @GetTextSize(_toggleIcons);">@_toggleIcons</p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
                else if (_saturnState == SaturnState.S_LobbyPick)
                {
                    <div class="container">
                        <div class="card" @onclick=@(async () => await GoToLobbyCosmetics(ItemType.IT_Skin))>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Lobby Skins", true);">Lobby Skins</h2>
                                <p style="color:white; font-size: @GetTextSize("This takes you to the page where you can choose which SKIN you want to swap.");">This takes you to the page where you can choose which SKIN you want to swap.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(async () => await GoToLobbyCosmetics(ItemType.IT_Backbling))>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Lobby Backblings", true);">Lobby Backblings</h2>
                                <p style="color:white; font-size: @GetTextSize("This takes you to the page where you can choose which BACKBLING you want to swap.");">This takes you to the page where you can choose which BACKBLING you want to swap.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(async () => await GoToLobbyCosmetics(ItemType.IT_Pickaxe))>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Lobby Pickaxes", true);">Lobby Pickaxes</h2>
                                <p style="color:white; font-size: @GetTextSize("This takes you to the page where you can choose which PICKAXE you want to swap.");">This takes you to the page where you can choose which PICKAXE you want to swap.</p>
                            </div>
                        </div>
                        <div class="card" @onclick=@(async () => await GoToLobbyCosmetics(ItemType.IT_Dance))>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="font-size: @GetTextSize("Lobby Emotes", true);">Lobby Emotes</h2>
                                <p style="color:white; font-size: @GetTextSize("This takes you to the page where you can choose which EMOTE you want to swap.");">This takes you to the page where you can choose which EMOTE you want to swap.</p>
                            </div>
                        </div>
                        
                        
                        
                    </div>
                }
                else if (_saturnState == SaturnState.S_LobbyItem)
                {
                    <div class="container">
                        @foreach (var item in _items)
                        {
                            <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await GoToLobbyOptions(item))>
                                @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }
                                    
                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize(item.Name, true);">@item.Name</h2>
                                    @switch (item.PrintColor)
                                    {
                                        case Colors.C_WHITE:
                                            <p style="color:white; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                        case Colors.C_YELLOW:
                                            <p style="color:yellow; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                        case Colors.C_RED:
                                            <p style="color:red; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                        case Colors.C_GREEN:
                                            <p style="color:green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                    }
                                </div>

                            </div>
                        }

                    </div>
                }
                else if (_saturnState == SaturnState.S_LobbyOption)
                {
                    <div class="container">
                        @foreach (var item in _items)
                        {
                            <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await _swapperService.SwapLobby(CurrentSkin, item))>
                                @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }
                                    
                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    <h2 style="font-size: @GetTextSize(item.Name, true);">@item.Name</h2>
                                    @switch (item.PrintColor)
                                    {
                                        case Colors.C_WHITE:
                                            <p style="color:white; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                        case Colors.C_YELLOW:
                                            <p style="color:yellow; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                        case Colors.C_RED:
                                            <p style="color:red; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                        case Colors.C_GREEN:
                                            <p style="color:green; font-size: @GetTextSize(item.Description);">@item.Description</p>
                                            break;
                                    }
                                </div>

                            </div>
                        }

                    </div>
                }
                else
                {
                    throw new AccessViolationException("You somehow got to a state that doesn't exist... like Alaska");
                }
                </div>
            </section>
        }
</main>
</body>

@code
{
    private List<Cosmetic> _items;
    private List<List<Cosmetic>> _tabs;
    private List<Cosmetic> _backupItems;

    private List<SaturnItem> _skinOptions = new List<SaturnItem>();
    
    private bool _halted;
    private int _tabIndex;
    private int _tabCount;

    private bool _showIcons = true;

    private Dictionary<string, Preset> _presets = new Dictionary<string, Preset>();
    private List<PresetItem> _convertedItems = new List<PresetItem>();
    private Preset _currentPreset = null;
    private string _currentName = String.Empty;
    private bool _presetsLoaded = false;
    
    private string Avatar { get; set; }
    private string Username { get; set; }

    private ItemType currentType { get; set; }

    private string _removeDuped = "This will remove all duplicated files from Fortnite (resetting all swaps) and reset the config.";
    private Colors _removeDupedColor = Colors.C_YELLOW;

    private string _resetConfig = "This will reset the config to the default settings. WARNING: This will not unswap anything!";
    private Colors _resetConfigColor = Colors.C_YELLOW;

    private string _launchFortnite = "This will launch Fortnite and prevent it from verifying your game on close.";
    private Colors _launchFortniteColor = Colors.C_WHITE;

    private string _openLogFile = "This will open the log file that correlates to the current swapper session.";
    private Colors _openLogColor = Colors.C_WHITE;

    private string _toggleIcons = "This will toggle the icons owned by Epic Games on and off.";
    private Colors _toggleIconsColor = Colors.C_WHITE;
    
    private string _showStyles = "";

    private SaturnState _saturnState = SaturnState.S_Key;
    
    public static Cosmetic CurrentSkin;
    private SaturnItem _currentOption;

    private SearchType _searchType = SearchType.ST_Name;

    private async Task ToggleIcons()
    {
        _showIcons = !_showIcons;
        _toggleIconsColor = Colors.C_GREEN;
        _toggleIcons = $"Successfully changed value to {_showIcons}!";

        await Task.Delay(2000);
        _toggleIcons = "This will toggle the icons owned by Epic Games on and off.";
        _toggleIconsColor = Colors.C_WHITE;
    }

    /// <summary>
    /// Uninstalls saturn
    /// </summary>
    private async Task Uninstall()
    {
        Uninstaller.Uninstall();
    }

    private async Task LoadConfig()
    {
        if (_currentPreset is not null)
        {
            _convertedItems = _currentPreset.Items; // Set the items to the preset items
            return;
        }
        
        var convItems = await _configService.TryGetConvertedItems(); // Get the items from the config
        foreach (var item in convItems)
        {
            var presetItem = new PresetItem()
            {
                ToName = item.Name,
                FromName = item.FromName,
                Item = item.Item,
                Option = item.Option,
                Type = item.ItemType,
                IsDefault = item.IsDefault
            };
            
            _convertedItems.Add(presetItem);
        }
    }

    private async Task SwapPreset()
    {
        _saturnState = SaturnState.S_Loading;
        var sorted = new List<PresetItem>();
        var converted = _currentPreset.IsConverted;
        if (converted)
        {
            sorted = _currentPreset.Items.OrderByDescending(x => x.Type).ToList();
        }
        else
        {
            sorted = _currentPreset.Items.OrderBy(x => x.Type).ToList();
        }

        var defaultSwapFound = false;
        foreach (var item in sorted)
        {
            if (converted)
            {
                if (item.IsDefault && defaultSwapFound)
                {
                    item.Item.IsConverted = false;
                    await _configService.RemoveConvertedItem(item.Item.Id);
                    continue;
                }

                if (item.IsDefault)
                {
                    defaultSwapFound = true;
                }
            }
            
            await _swapperService.Swap(item.Item, item.Option, item.Type, _items, false); // Swap the item
        }
        
        _currentPreset.Items = sorted; // Set the preset items to the converted items
        await SavePreset();
        await ChangeState(SaturnState.S_Presets, LoadPresets);
    }
    
    private async Task LoadPresets()
    {
        var presets = new Dictionary<string, Preset>();
        _saturnState = SaturnState.S_Loading;
        Directory.CreateDirectory(Config.PresetsPath); // Create the preset folder if it doesn't exist
        foreach (var file in Directory.EnumerateFiles(Config.PresetsPath))
        {
            var contents = File.ReadAllText(file); // Read the file
            var preset = JsonConvert.DeserializeObject<Preset>(contents); // Deserialize the json
            presets.Add(preset.Name, preset); // Add the preset to the list
            Logger.Log($"Loaded preset {preset.Name}"); // Log the preset
        }
        
        _presets = presets; // Set the presets
        _saturnState = SaturnState.S_Presets;
    }
    
    private async Task EditPreset()
    {
        await LoadConfig();
        _saturnState = SaturnState.S_PresetConfiguration;
    }
    
    private async Task SavePreset()
    {
        var name = Config.PresetsPath + "//" + _currentName + ".json";
        Directory.CreateDirectory(Config.PresetsPath); // Create the preset folder if it doesn't exist
        _saturnState = SaturnState.S_Loading;
        if (_currentPreset is not null)
        {
            var oldName = Config.PresetsPath + "//" + _currentPreset.Name + ".json";
            _currentPreset.Name = _currentName;
            File.Move(oldName, name);
            File.WriteAllText(name, JsonConvert.SerializeObject(_currentPreset, Formatting.Indented));
        }
        else
        {
            if (string.IsNullOrEmpty(_currentName)) // If the preset name is empty
                return; // Return

            if (!_presets.TryAdd(_currentName, new Preset() { Name = _currentName, Items = _convertedItems }))
            {
                await _jsRuntime.InvokeVoidAsync("MessageBox", "Preset with that name already exists!", "Preset with that name already exists! Choose a different name that has not been used!", "error");
                Logger.Log("Preset with that name already exists!", LogLevel.Error); // Log the error
            }
            
            File.WriteAllText(name, JsonConvert.SerializeObject(_presets[_currentName], Formatting.Indented)); // Write the preset to the file
        }
        
        _currentName = string.Empty;
        _currentPreset = null;
        await LoadPresets();
    }

    private async Task DeletePreset()
    {
        _saturnState = SaturnState.S_Loading;
        if (_currentPreset is not null)
        {
            _presets.Remove(_currentPreset.Name); // Remove the preset from the dictionary
            _currentPreset = null; // Reset the current preset
            await LoadConfig(); // Reload the config
        }
        
        File.Delete(Config.PresetsPath + "//" + _currentName + ".json"); // Delete the preset file
        await LoadPresets();
    }

    private async Task ChangeState(SaturnState state, Func<Task> func)
    {
        _saturnState = state;
        await func();
    }

    private async Task GoToLobbyCosmetics(ItemType type)
    {
        if (_halted) return;
        _halted = true;
        currentType = type;
        _saturnState = SaturnState.S_Loading;

        await Task.Run(async () =>
        {
            switch (type)
            {
                case ItemType.IT_Skin:
                    _items = await _swapperService.GetSaturnSkins(true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Backbling:
                    _items = await _swapperService.GetSaturnBackblings(true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Pickaxe:
                    _items = await _swapperService.GetSaturnPickaxes(true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Dance:
                    _items = await _swapperService.GetSaturnEmotes(true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Misc:
                    break;
            }
        });
        
        _saturnState = SaturnState.S_LobbyItem;

        await _jsRuntime.InvokeVoidAsync("MessageBox", "Pick the item you want to swap FROM", "Pick the item you have in your locker", "warning");
        _halted = false;
    }

    private async Task GoToLobbyOptions(Cosmetic item)
    {
        if (_halted) return;
        _halted = true;
        CurrentSkin = item;
        _saturnState = SaturnState.S_Loading;

        await Task.Run(async () =>
        {
            switch (currentType)
            {
                case ItemType.IT_Skin:
                    _items = await _swapperService.GetSaturnSkins(true, true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Backbling:
                    _items = await _swapperService.GetSaturnBackblings(true, true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Pickaxe:
                    _items = await _swapperService.GetSaturnPickaxes(true, true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Dance:
                    _items = await _swapperService.GetSaturnEmotes(true, true);
                    _backupItems = new List<Cosmetic>(_items);
                    break;
                case ItemType.IT_Misc:
                    break;
            }
        });
        
        _saturnState = SaturnState.S_LobbyOption;
        
        await _jsRuntime.InvokeVoidAsync("MessageBox", "Pick the item you want to swap TO", "Pick the item you want", "warning");
        _halted = false;
    }

    private async Task SetCosmeticOptions(Cosmetic item)
    {
        if (item.Id.Contains("CID_"))
            _skinOptions = await _swapperService.GetSkinOptions(item);
        else if (item.Id.Contains("BID_"))
            _skinOptions = await _swapperService.GetBackblingOptions(item);
        else if (item.Id.Contains("EID_"))
            _skinOptions = await _swapperService.GetEmoteOptions(item);
        else
            _skinOptions = await _swapperService.GetPickaxeOptions(item);
    }

    /// <summary>
    /// Toggles if the item is picking styles or not/
    /// </summary>
    /// <param name="item">The clicked item</param>
    private async Task SwitchItemStyleChoice(Cosmetic item)
        => item.IsPickingStyles = !item.IsPickingStyles;
    
    /// <summary>
    /// Sets the Show Styles button text
    /// </summary>
    private async Task ShouldShowStyles()
        => _showStyles = await _configService.TryGetShouldShowStyles() 
            ? "Currently set to 'WILL show item styles.' This could cause performance issues on low-end PCs!" 
            : "Currently set to 'WILL NOT show item styles.' This could cause performance issues on low-end PCs!";

    /// <summary>
    /// This will get the currently swapped items and return them in a message box.
    /// </summary>
    private async Task GetCurrentlySwapped()
    {
        string CurrentlySwapped = (await _configService.TryGetConvertedItems()).Aggregate("", (current, x) => current + (x.Name + "\n")); // Loops through all the converted items and adds them in a string together that will be displayed

        await _jsRuntime.InvokeVoidAsync("MessageBox", "Currently Swapped Items", "You currently have the following items swapped: " + CurrentlySwapped); // Display the string in a message box
    }

    /// <summary>
    /// Called on the window load event.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        AppDomain.CurrentDomain.FirstChanceException += UnhandledException; // Catch unhandled exceptions

        await ShouldShowStyles(); // Get the current style setting

        var currentUser = _discordRPCService.Client.CurrentUser; // Get the current user

        for (int i = 0; i <= 5; i++) // If the current user doesn't exist, try to get it again (MAX 5 TIMES)
        {
            if (currentUser == null) // If the current user doesn't exist
            {
                await Task.Delay(500); // Wait half a second
                currentUser = _discordRPCService.Client.CurrentUser; // Get the current user
            }
        }

        await CheckIfUserIsBeta(); // Check if the user is a beta tester

        if (currentUser != null) // If the current user exists
        {
            Avatar = currentUser.GetAvatarURL(User.AvatarFormat.PNG); // Get the current user's avatar
            Username = $"{currentUser.Username}#{currentUser.Discriminator}"; // Get the current user's username
        }

        await CheckKey(); // Check if the key is valid

        await CheckUpdate(); // Check if there is an update

        if (await IsFortniteOpen())
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Fortnite has been closed.", "Fortnite has been closed. You cannot use a swapper while Fortnite is running in the background!", "warning");

        await CheckMaintenance(); // Check if the swapper is in maintenance mode

        await CheckForOldFiles(); // Check if there are old files

        await DeletePedoSwapperBackups(); // Deletes backups from Pedo Swapper

        await DeleteOtherBackups(); // Deletes backups from other swappers

        await base.OnInitializedAsync(); // Call the base OnInitializedAsync method
    }

    /// <summary>
    /// On an unhandled exception, this will log the exception and set the error state.
    /// </summary>
    private void UnhandledException(object sender, FirstChanceExceptionEventArgs e)
    {
        if (_halted) // If the app is already halted, don't do anything.
            return; // This is to prevent the app opening inf log tabs.
        
        // Otherwise
        
        _halted = true; // Set the halted state to true.

        var stackTrace = "\n" + e.Exception.ToString().Split("--- ")[0]; // Get the stack trace.

        if (stackTrace.Contains("System.ComponentModel.Win32Exception") || stackTrace.Contains("System.Net.Sockets.SocketException") || stackTrace.Contains("System.ArgumentNullException") || stackTrace.Contains("System.TimeoutException") || stackTrace.Contains("System.Threading.Tasks.TaskCanceledException")) // These literally do not matter
            return; // Ignore it

        Logger.Log($"Unhandled exception occurred. {e.ToString().GetType().Name}: {e.ToString()} {stackTrace}", LogLevel.Fatal); // Log the exception.

        _items = new List<Cosmetic>(); // Clear the items.
        _saturnState = SaturnState.S_Error; // Set the state to error.
        
        _jsRuntime.InvokeVoidAsync("MessageBox", "An Error Has Occured", "There has been an unhandled exception that occured in the program. Please send the log (now opening) to the support channel in Saturn's discord server!", "error").GetAwaiter(); // Show the error message.

        Task.Delay(1000).GetAwaiter(); // Wait a second
        OpenLog().GetAwaiter(); // Open the log.
    }

    // So the key only shows up once
    bool _once;
    
    /// <summary>
    /// Checks if the key is valid
    /// </summary>
    /// <param name="key">The key the user is trying to use</param>
    private async Task CheckKey(string? key = null)
    {
        var keyToUse = key ?? _configService.ConfigFile.Key; // If the key is null, use the key from the config file

        var keyData = JsonConvert.DeserializeObject<SearchModel>(await _saturnAPIService.ReturnEndpointAsync($"/api/v1/Saturn/ReturnKeyExists?key={keyToUse}")); // Get the key data
        if (keyData.found) // Get the key info from the Saturn API, if it's valid continue
        {
            if (keyData.hwid != FileUtil.GetHWID() && keyData.hwid != "NotSet")
            {
                await _jsRuntime.InvokeVoidAsync("MessageBox", "HWID Mismatch", "The key you entered is bound to a different HWID. Please generate a new key and don't share them!", "warning");
                return;
            }

            await _saturnAPIService.ReturnEndpointAsync($"/api/v1/Saturn/SetHWID?key={keyToUse}&hwid={FileUtil.GetHWID()}"); // Set the HWID in the Saturn API
            _configService.ConfigFile.Key = keyToUse; // Set the key in the config file to the key the user is trying to use
            _configService.SaveConfig(); // Save the config file
            _saturnState = SaturnState.S_Dash; // Set the saturn state to the dash
            await FileUtil.OpenBrowser(JsonConvert.DeserializeObject<IndexModel>(await _saturnAPIService.ReturnEndpointAsync("/")).DiscordServer); // Open the discord server invite in the browser
        }
        else if (Config.isBeta) // If the user is a beta user, continue
            _saturnState = SaturnState.S_Dash; // Set the saturn state to the dash
        else if (!_once) // If the key is not valid, the user is not a beta user, and the key has not been shown yet
        {
            await FileUtil.OpenBrowser(JsonConvert.DeserializeObject<IndexModel>(await _saturnAPIService.ReturnEndpointAsync("/")).KeyLink); // Open the key link in the browser
            _once = true; // Set the bool for if the key has been shown to true
        }

    }

    /// <summary>
    /// Check if the user is a beta user
    /// </summary>
    private async Task CheckIfUserIsBeta()
    {
        if (_discordRPCService.Client.CurrentUser == null) // If the user is not logged in or doesn't have Discord desktop open
        {
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Couldn't get Discord user info!", "Please open discord if you intend to use BETA features!", "error"); // show a message saying they need to open discord to use beta features
            return; // return
        }

        // Otherwise
        
        var user = _discordRPCService.Client.CurrentUser; // get the user

        ulong userID = 0u; // create a user id
        try
        {
            userID = user.ID; // try to set the user id
        }
        catch
        {
            Logger.Log("Could not get user ID. Is user using Discord web?", LogLevel.Error); // if it fails, log it
        }

        var betaUsers = await GetBetaIDs(); // get the beta users

        foreach (var _ in betaUsers.Where(betaUser => betaUser == userID)) // If the user id is in the list of beta users
            Config.isBeta = true; // set the config to beta
        
        if (!Config.isBeta) // if the user is not a beta user
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Detected you are not a BETA user!", "Boost Tamely's Discord if you want to use BETA features!", "error"); // show a message saying they need to boost Saturn's discord to use beta features
    }
    
    /// <summary>
    /// Get the required height and width of the specified text. Uses FormattedText
    /// </summary>
    private static System.Drawing.Size MeasureTextSize(string text, FontFamily fontFamily, FontStyle fontStyle, FontWeight fontWeight, FontStretch fontStretch, double fontSize)
    {
        FormattedText ft = new FormattedText(text, // Start a new formatted text
            CultureInfo.CurrentCulture, // Set the text culture
            FlowDirection.LeftToRight, // English is left to right
            new Typeface(fontFamily, fontStyle, fontWeight, fontStretch), // Create a new typeface for a font
            fontSize, // Set the font size
            Brushes.Black); // Set the text color to black
        return new System.Drawing.Size((int)ft.Width, (int)ft.Height); // Return the size of the text
    }

    /// <summary>
    /// Get the required height and width of the specified text. Uses Glyph's
    /// </summary>
    private static System.Drawing.Size MeasureText(string text, FontFamily fontFamily, FontStyle fontStyle, FontWeight fontWeight, FontStretch fontStretch, double fontSize)
    {
        Typeface typeface = new Typeface(fontFamily, fontStyle, fontWeight, fontStretch); // Create a new typeface for a font
        GlyphTypeface glyphTypeface; // Create a glyph typeface

        if(!typeface.TryGetGlyphTypeface(out glyphTypeface)) // If the typeface can't get glyphs
        {
            return MeasureTextSize(text, fontFamily, fontStyle, fontWeight, fontStretch, fontSize); // Use formatted text
        }

        // Otherwise
        
        double totalWidth = 0; // Create a total width
        double height = 0; // Create a height

        foreach (var t in text) // For each character in the text
        {
            ushort glyphIndex = glyphTypeface.CharacterToGlyphMap[t]; // Get the glyph index

            double width = glyphTypeface.AdvanceWidths[glyphIndex] * fontSize; // Get the width of the glyph

            double glyphHeight = glyphTypeface.AdvanceHeights[glyphIndex]*fontSize; // Get the height of the glyph

            if (glyphHeight > height) // If the glyph height is greater than the current height
                height = glyphHeight; // Set the new height

            totalWidth += width; // Add the width to the total width
        }

        return new System.Drawing.Size((int)totalWidth, (int)height); // Return the size of the text
    }
    
    /// <summary>
    /// Gets font size from character count
    /// </summary>
    /// <returns>double: The font size the swapper should use</returns>
    /// <param name="text">The text to scale</param>
    /// <param name="isHeader">Is the text a header or a body?</param>
    private string GetTextSize(string text, bool isHeader = false)
    {
        uint maxWidth = 160; // Max width (in pixels) of the header text
        uint startingSize = 20; // Starting font size (in pixels) for the header text
        if (isHeader)
        {
            while (MeasureText(text, new FontFamily("sans-serif"), FontStyles.Normal, FontWeights.Bold, FontStretches.Normal, startingSize).Width > maxWidth) // While the text is too long
                startingSize--; // Decrease the font size

            return startingSize + "px"; // Return the font size
        }
        
        maxWidth = 380; // Max width (in pixels) of the body text
        startingSize = 11; // Starting font size (in pixels) for the body text

        while (MeasureText(text, new FontFamily("sans-serif"), FontStyles.Normal, FontWeights.Normal, FontStretches.Normal, startingSize).Width > maxWidth) // While the text is too long
            startingSize--; // Decrease the font size

        return startingSize + "px"; // Return the font size
    }
    
    /// <summary>
    /// Get all the beta users from the database
    /// </summary>
    /// <returns>List<ulong>: All the user's IDs that have access to the BETA version of the swapper.</returns>
    private async Task<List<ulong>> GetBetaIDs()
    {
        var json = await _saturnAPIService.ReturnEndpointAsync("/api/v1/Saturn/GetBeta");
        return JsonConvert.DeserializeObject<List<ulong>>(json);
    }

    /// <summary>
    /// Check if the swapper should be in maintenance mode
    /// </summary>
    private async Task CheckMaintenance()
    {
        if (await GetFortniteBuild() != await GetLastestVersion()) // If the build is outdated
            Config.isMaintenance = true; // Set the swapper to maintenance mode
    }

    /// <summary>
    /// Checks for old backups
    /// </summary>
    private async Task CheckForOldFiles()
    {
        if (await _configService.TryGetFortniteVersion() != await GetLastestVersion() && File.Exists(Directory.GetFiles(FortniteUtil.PakPath).FirstOrDefault(x => x.Contains("Saturn")))) // If there is a backup and the swapper is not the latest Fortnite version
        {
            if (!string.IsNullOrEmpty(await _configService.TryGetFortniteVersion())) // If the configs Fortnite version isn't null
            {
                Logger.Log(await _configService.TryGetFortniteVersion()); // Log the configs version
                await RemoveDupedFiles(); // Remove duped files
                await _jsRuntime.InvokeVoidAsync("MessageBox", "Detected old backups!", "The swapper has automatically removed them for you!", "warning"); // Show a message confirming the files have been removed

            }
            await _configService.TrySetFortniteVersion(await GetLastestVersion()); // Set the configs version to the latest version
        }
    }

    /// <summary>
    /// Checks if there are duped files from Galaxy Swapper
    /// </summary>
    private async Task DeletePedoSwapperBackups()
    {
        bool found = false; // Create a bool for if the backup has been found
        foreach (var dir in Directory.GetDirectories(FortniteUtil.PakPath)) // Foreach folder in the pak path
            if (dir.Contains("Galaxy")) // If the folder contains Galaxy
            {
                Directory.Delete(dir, true); // Delete the folder
                found = true; // Set found to true
            }

        if (found) // If we found a galaxy backup
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Deleted Galaxy Swapper backups!", "The swapper has automatically removed them for you! You should never combine swappers, but if you do, don't use Galaxy because the owner is a known pedophile and the swapper has been confirmed to be a VIRUS several times.", "warning"); // Show a message confirming the files have been removed
    }

    /// <summary>
    /// Checks if there are duped files from anything else
    /// </summary>
    private async Task DeleteOtherBackups()
    {
        bool found = false; // Create a bool for if the backup has been found
        foreach (var dir in Directory.GetDirectories(FortniteUtil.PakPath)) // Foreach folder in the pak path
        {
            if (dir.Contains("Saturn")) continue; // If the folder contains Saturn, return
            Directory.Delete(dir, true); // Delete the folder
            found = true; // Set found to true
        }

        if (found) // If we found a backup
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Deleted other swapper's backups!", "The swapper has automatically removed them for you!", "warning"); // Show a message confirming the files have been removed
    }

    /// <summary>
    /// Checks if there is an update available for the swapper.
    /// </summary>
    private async Task CheckUpdate()
    {
        if (Constants.UserVersion != await _configService.TryGetSwapperVersion())
        {
            await _configService.TrySetSwapperVersion();
        }

        if (Constants.UserVersion != await GetSwapperVersion()) // If the user's version is not the latest version
            _saturnState = SaturnState.S_Update; // Set the state to update
    }

    /// <summary>
    /// Gets the latest supported Fortnite version from the swapper API.
    /// </summary>
    /// <returns>String: The latest supported Fortnite version of the swapper.</returns>
    private async Task<string> GetFortniteBuild()
    {
        var data = await _saturnAPIService.ReturnEndpointAsync("/"); // Gets the index of Tamely's API.
        return JsonConvert.DeserializeObject<IndexModel>(data).APIVersion; // Parses the index and returns the latest supported version.
    }

    /// <summary>
    /// Gets the latest version of the swapper from Tamely's API
    /// </summary>
    /// <returns>String: The latest version of Saturn Swapper</returns>
    private async Task<string> GetSwapperVersion()
    {
        var data = await _saturnAPIService.ReturnEndpointAsync("/"); // Gets the data from the index of the API
        return JsonConvert.DeserializeObject<IndexModel>(data).swapperVersion; // Gets the version from the index of the API and returns it
    }

    /// <summary>
    /// Gets the latest version of Fortnite from FortniteAPI
    /// </summary>
    /// <returns>String: The latest build name of Fortnite</returns>
    private async Task<string> GetLastestVersion()
    {
        return _fortniteAPIService.GetAES().Build; // Returns the latest build number
    }

    /// <summary>
    /// Opens the log file and shows a message saying there was an error
    /// </summary>
    private async Task RunError()
    {
        await _jsRuntime.InvokeVoidAsync("MessageBox", "There has been an error that we were not able to recover from!", "Please send your logs in Saturn Support so we are able to solve it for you!"); // Shows a message that says there was an error

        await Task.Delay(1500); // Waits for the message to be shown and the user ot read it

        Process.Start("notepad.exe", Config.LogFile); // Opens the log file
    }

    /// <summary>
    /// Shows the update message to update the swapper
    /// </summary>
    private async Task RunUpdate()
    {
        await _jsRuntime.InvokeVoidAsync("MessageBox", "There is a swapper update ready to download!", "Please download it from Tamely's Discord.", "error"); // Show update message on screen
        await FileUtil.OpenBrowser(JsonConvert.DeserializeObject<IndexModel>(await _saturnAPIService.ReturnEndpointAsync("/")).DiscordServer); // Open discord server in browser
    }

    /// <summary>
    /// Filters items according to your search input from the list of items
    /// </summary>
    /// <param name="input">The search input</param>
    private async Task FilterItems(string input)
    {
        _items = new List<Cosmetic>(_backupItems); // Sets the items to the backup items

        _searchType = (SearchType) await _jsRuntime.InvokeAsync<int>("GetSelectedElement"); // Gets the selected search type

        switch (_searchType) // Switch what the swapper will do with the search type
        {
            case SearchType.ST_Name: // If the search type is name
                _items.RemoveAll(x => !FilterString(x.Name.ToLower()).Contains(FilterString(input.ToLower())) && !FilterString(x.Description.ToLower()).Contains(FilterString(input.ToLower()))); // Removes all items that don't contain the search input in the name or description
                break;
            case SearchType.ST_ID: // If the search type is ID
                _items.RemoveAll(x => !FilterString(x.Id.ToLower()).Contains(FilterString(input.ToLower()))); // Removes all items that don't contain the search input in the ID
                break;
            case SearchType.ST_Rarity: // If the search type is rarity
                _items.RemoveAll(x => !FilterString(x.Rarity.BackendValue.ToLower().Replace("efortrarity::", "")).StartsWith(FilterString(input.ToLower()))); // Removes all items that don't have the rarity in the search input
                break;
            case SearchType.ST_Set: // If the search type is set
                _items.RemoveAll(x =>
                {
                    if (x.GameplayTags == null || x.GameplayTags.Count == 0 || x.GameplayTags == new List<string>()) // If the item has no gameplay tags
                        return true; // remove it

                    return x.GameplayTags.Count(tag => FilterString(tag.ToLower()).Contains(FilterString(input.ToLower())) && tag.ToLower().Contains("set")) <= 0; // If the item has a gameplay tag that contains the search input and it contains the word "set", don't remove it
                });
                break;
            case SearchType.ST_Season: // If the search type is season
                _items.RemoveAll(x =>
                {
                    if (x.GameplayTags == null || x.GameplayTags.Count == 0 || x.GameplayTags == new List<string>()) // If the item has no gameplay tags
                        return true; // remove it

                    return x.GameplayTags.Count(tag => tag.ToLower().Equals($"cosmetics.filter.season.{input}")) <= 0; // If the item has a gameplay tag that contains the season specified in the input, don't remove it
                });
                break;
            case SearchType.ST_Series: // If the search type is series
                _items.RemoveAll(x =>
                {
                    if (x.Series == null || x.Series == new Series() || x.Series.Value == null) // If the item has no series
                        return true; // remove it

                    return !FilterString(x.Series.Value.ToLower()).Contains(FilterString(input.ToLower())); // If the item has a series that contains the search input, don't remove it
                });
                break;
            case SearchType.ST_Source: // If the search type is source
                _items.RemoveAll(x =>
                {
                    if (x.GameplayTags == null || x.GameplayTags.Count == 0 || x.GameplayTags == new List<string>()) // If the item has no gameplay tags
                        return true; // remove it

                    return x.GameplayTags.Count(tag => FilterString(tag.ToLower()).Contains(FilterString(input.ToLower())) && tag.ToLower().Contains("source")) <= 0; // If the item has a gameplay tag that contains the search input and it contains the word "source", don't remove it
                });
                break;
            default: // If the search type is anything else
                throw new ArgumentOutOfRangeException("How tf did you select a search type that doesn't exist?"); // Throw an exception
        }

        await ChunkCosmetics();
    }

    /// <summary>
    /// Removes all non-alphanumeric characters from a string
    /// </summary>
    private string FilterString(string input)
        => Regex.Replace(input, @"[^0-9a-zA-Z]+", "");

    /// <summary>
    /// Toggles showing items styles in the item lists.
    /// </summary>
    private async Task ToggleShowStyles()
    {
        await _configService.TrySetShouldShowStyles(!await _configService.TryGetShouldShowStyles()); // Toggle the config value

        _showStyles = await _configService.TryGetShouldShowStyles() switch // Set the text to display
        {
            true => "Currently set to 'WILL show item styles.' This could cause performance issues on low-end PCs!", // If true, it will show styles
            false => "Currently set to 'WILL NOT show item styles.' This could cause performance issues on low-end PCs!" // If false, it will not show styles
        };
    }

    /// <summary>
    /// Moves plugins to the plugin folder.
    /// </summary>
    private async Task SubmitPlugin()
    {
        try // Try doing the following:
        {
            Directory.CreateDirectory(Config.PluginsPath); // Create the plugins folder if it doesn't exist.
            List<string> blacklistedFiles = new List<string>() // Create a list of blacklisted files (only ever in debugging)
            {
                "Saturn.Backend.staticwebassets.runtime.json",
                "Saturn.deps.json",
                "Saturn.runtimeconfig.json",
                "Saturn.staticwebassets.runtime.json"
            }; // Ends the list of blacklisted files.
            foreach (var file in Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory)) // For each file in the current directory.
                if ((file.EndsWith(".json") || file.EndsWith(".saturn")) && blacklistedFiles.Find(e => file.ToLower().EndsWith(e.ToLower())) == null) // If the file is a json file and isn't blacklisted.
                    File.Move(file, Config.PluginsPath + Path.GetFileName(file)); // Move the file to the plugins folder.

            await _jsRuntime.InvokeVoidAsync("MessageBox", "Success", "Finished moving plugin files to the plugins folder!", "success"); // Show a message box saying it was successful.
        }
        catch (Exception e) // If something went wrong
        {
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Error", "There was an error moving the plugin files to the plugins folder! Please report this and the current swapper log to Tamely in his Discord!", "error"); // Show a message box saying it was unsuccessful.
            Logger.Log(e.ToString()); // Log the error.
        }
    }

    /// <summary>
    /// Opens a new window of notepad with the logfile in it
    /// </summary>
    private async Task OpenLog()
    {
        Process.Start("notepad.exe", Config.LogFile); // Open the log file in notepad
    }

    /// <summary>
    /// Launches Fortnite
    /// </summary>
    private async Task Launch()
    {
        Process.Start(new ProcessStartInfo // Create a new process
        {
            FileName = "cmd.exe", // Use cmd.exe
            Arguments = "/c start com.epicgames.launcher://apps/Fortnite?action=launch&silent=true", // Set the arguments we want
            WindowStyle = ProcessWindowStyle.Hidden, // Hide the window
            CreateNoWindow = true // Don't create a new window
        }); // Start the process

        _launchFortnite = "Fortnite is launching... please wait."; // Set the button text to "Fortnite is launching..."
        _launchFortniteColor = Colors.C_GREEN; // Set the button color to green

        await WaitForFortnite(); // Wait for Fortnite to close

        _launchFortnite = "Epic Games Launcher has been closed which stopped the verification process."; // Set the button text to "Epic Games Launcher has been closed which stopped the verification process."
        _launchFortniteColor = Colors.C_GREEN; // Set the button color to green

        await Task.Delay(5000); // Wait 5 seconds

        _launchFortnite = "This will launch Fortnite and prevent it from verifying your game on close."; // Set the button text to "This will launch Fortnite and prevent it from verifying your game on close."
        _launchFortniteColor = Colors.C_WHITE; // Set the button color to white
    }

    /// <summary>
    /// Waits for Fortnite to launch. Then when it closes, it closes Epic Games Launcher to stop the verification process.
    /// </summary>
    private async Task WaitForFortnite()
    {
        while (Process.GetProcessesByName("FortniteClient-Win64-Shipping").Length == 0) // Waits for Fortnite to launch
            await Task.Delay(500); // Give it a half a second break until we check if it launched
        
        _launchFortnite = "Fortnite has launched!"; // Change the text of the settings button to show that Fortnite has launched

        await Task.Delay(5000); // Wait 5 seconds

        _launchFortnite = "Waiting for Fortnite to close..."; // Change the text of the settings button to show that we are waiting for Fortnite to close
        _launchFortniteColor = Colors.C_WHITE; // Change the color of the settings button to white

        while (Process.GetProcessesByName("FortniteClient-Win64-Shipping").Length != 0) // Waits for Fortnite to close
            await Task.Delay(2000); // Wait two seconds before checking again

        foreach (var process in Process.GetProcesses()) // Get all processes running on the computer
            if (process.ProcessName == "EpicGamesLauncher") // If the process is Epic Games Launcher
                process.Kill(); // Kill it
    }

    /// <summary>
    /// Resets the config file to the default values
    /// </summary>
    private async Task ResetConfiguration()
    {
        _configService.ConfigFile = new Saturn.Backend.Core.Models.Configuration(); // Reset the config file
        _configService.SaveConfig(); // Save the config file

        _resetConfig = "Reset the swapper's config to default settings!"; // Set the reset config message
        _resetConfigColor = Colors.C_GREEN; // Set the reset config message color

        await Task.Delay(5000); // Wait 5 seconds

        _resetConfig = "This will reset the config to the default settings. WARNING: if you swapped something and need to revert it, you wont be able to!"; // Set the reset config message
        _resetConfigColor = Colors.C_YELLOW; // Set the reset config message color
    }

    /// <summary>
    /// Removes all files in the paks folder the have 'Saturn' in their name.
    /// </summary>
    private async Task RemoveDupedFiles()
    {
        try
        {
            if (Directory.Exists(Path.Combine(FortniteUtil.PakPath, "Saturn"))) // If the Saturn folder exists
                Directory.Delete(Path.Combine(FortniteUtil.PakPath, "Saturn"), true); // Delete it
            
            foreach (var file in Directory.EnumerateFiles(FortniteUtil.PakPath)) // Enumerates through the files in the paks folder
                if (file.Contains("Saturn")) // If the file contains 'Saturn' in its name
                    File.Delete(file); // Delete the file
            
            if (!Directory.Exists(Config.CompressedDataPath)) // If the compressed data folder doesn't exist
                Logger.Log("Compressed data path was not found! Did you not swap anything?", LogLevel.Fatal); // Log it
            else // Otherwise
                Directory.Delete(Config.CompressedDataPath, true); // Delete the folder

            if (!Directory.Exists(Config.DecompressedDataPath)) // If the decompressed data folder doesn't exist
                Logger.Log("Decompressed data path was not found! Did you not swap anything?", LogLevel.Fatal); // Log it
            else // Otherwise
                Directory.Delete(Config.DecompressedDataPath, true); // Delete the folder

            if (File.Exists(Config.BasePath + "//" + "LobbyBackground.png"))
                await RevertLobbyBG();

            _configService.ConfigFile = new Saturn.Backend.Core.Models.Configuration(); // Reset the config
            _configService.SaveConfig(); // Save the config
            
            Logger.Log("Setting preset converts to false.");
            if (!Directory.Exists(Config.PresetsPath))
            {
                Logger.Log("No presets folder found!");
            }
            else
            {
                Logger.Log("Presets folder found! Setting data...");
                foreach (var file in Directory.EnumerateFiles(Config.PresetsPath))
                {
                    var contents = await File.ReadAllTextAsync(file);
                    var preset = JsonConvert.DeserializeObject<Preset>(contents);
                    Logger.Log("Deserialized preset: " + preset.Name);
                    foreach (var item in preset.Items)
                    {
                        item.Item.IsConverted = false;
                        Logger.Log("Setting " + item.Item.Name + " to false");
                    }
                    
                    File.WriteAllText(file, JsonConvert.SerializeObject(preset, Formatting.Indented));
                    Logger.Log("Serialized preset: " + preset.Name);
                    Logger.Log("Writing to file: " + file);
                }
                
                Logger.Log("Successfully set all preset converts to false!");
            }

            _removeDuped = "Removed all duplicated files from Fortnite!"; // Set the message on the settings button

            _removeDupedColor = Colors.C_GREEN; // Set the color of the settings button
        }
        catch (Exception e)
        {
            Logger.Log("There was an error removing duped ucas! " + e.Message, LogLevel.Fatal); // Log it
            _removeDuped = "There was an error removing duped ucas send your Saturn log in the support channel! Is Fortnite open?"; // Set the message on the settings button
            _removeDupedColor = Colors.C_RED; // Set the color of the settings button
        }

        await Task.Delay(5000); // Wait 5 seconds

        _removeDuped = "This will remove all duplicated files from Fortnite (resetting all swaps) and reset the config."; // Set the message on the settings button
        _removeDupedColor = Colors.C_YELLOW;  // Set the color of the settings button
    }

    /// <summary>
    /// Changes the state of the screen to settings
    /// </summary>
    private async Task GoToSettings()
        => _saturnState = SaturnState.S_Settings;

    private async Task SetSearchType(SearchType searchType)
        => this._searchType = searchType;

    private async Task GetSaturnCosmetic(ItemType type, Func<Task<List<Cosmetic>>> callback)
    {
        _saturnState = SaturnState.S_Loading; // Set the screens state to loading
        _items = await callback(); // Await the callback
        await ChunkCosmetics();
        _backupItems = new List<Cosmetic>(_items); // Creates a backup of the list (used for searching)
        currentType = type; // Sets the current type of item to the type passed in
        _saturnState = SaturnState.S_Items; // Sets the screens state to items
    }

    private async Task ChunkCosmetics()
    {
        _tabs = new List<List<Cosmetic>>(); // Create a new list of tabs
        _tabCount = _items.Count / 150; // Calculate the number of pages
        var remaining = _items.Count % 150; // Calculate the number of items on the last page
        for (int i = 0; i < _tabCount; i++)
        {
            var tabItems = new List<Cosmetic>(); // Create a new list of items
            for (int j = 0; j < 150; j++)
            {
                tabItems.Add(_items[i * 150 + j]); // Add the item to the list
            }
            
            _tabs.Add(tabItems); // Add the list to the tabs
        }

        if (remaining > 0) // If there are still items remaining
        {
            var tabItems = new List<Cosmetic>(); // Create a new list of items
            for (int j = 0; j < remaining; j++)
            {
                tabItems.Add(_items[_tabCount * 150 + j]); // Add the item to the list
            }
            
            _tabs.Add(tabItems); // Add the list to the tabs
        }
    }

    /// <summary>
    /// Generates, loads, and displays skins on the screen.
    /// </summary>
    private async Task GetSaturnSkins()
    {
        await GetSaturnCosmetic(ItemType.IT_Skin, async () => await _swapperService.GetSaturnSkins());
        _tabIndex = 0;
    }

    private async Task GetSaturnMisc()
    {
        _saturnState = SaturnState.S_Loading;

        Directory.CreateDirectory(Config.PluginsPath);
        _items = await _fortniteAPIService.GetSaturnMisc();

        foreach (var file in Directory.EnumerateFiles(Config.PluginsPath))
        {
            if (!file.Contains("/Plugins/Saturn."))
               _items.Add(await DotSaturn.Read(file));
        }

        _items = await _fortniteAPIService.AreItemsConverted(_items);
        _tabIndex = 0;
        
        _backupItems = new List<Cosmetic>(_items);
        currentType = ItemType.IT_Misc;
        _saturnState = SaturnState.S_Misc;
    }

    private async Task GetSaturnPresets()
    {
        _saturnState = SaturnState.S_Loading;
        if (!_presetsLoaded)
        {
            await LoadConfig();
            _presetsLoaded = true;
        }
        
        _saturnState = SaturnState.S_PresetsMain;
    }

    /// <summary>
    /// Generates, loads, and displays backblings on the screen.
    /// </summary>
    private async Task GetSaturnBackblings()
    {
        await GetSaturnCosmetic(ItemType.IT_Skin, async () => await _swapperService.GetSaturnBackblings());
        _tabIndex = 0;
    }

    /// <summary>
    /// Generates, loads, and displays emotes on the screen.
    /// </summary>
    private async Task GetSaturnEmotes()
    {
        await GetSaturnCosmetic(ItemType.IT_Skin, async () => await _swapperService.GetSaturnEmotes());
        _tabIndex = 0;
    }
    
    /// <summary>
    /// Generates, loads, and displays pickaxes on the screen.
    /// </summary>
    private async Task GetSaturnPickaxes()
    {
        await GetSaturnCosmetic(ItemType.IT_Skin, async () => await _swapperService.GetSaturnPickaxes());
        _tabIndex = 0;
    }

    /// <summary>
    /// Switches the Fortnite lobby background to a selected image
    /// </summary>
    private async Task SwapLobbyBG()
    {
        // Set an empty file path
        string filePath = "";
        
        // Loop through each cache file Fortnite uses
        foreach (var cacheFile in JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, string>>>(JsonConvert.SerializeObject(JObject.Parse(File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "//FortniteGame/Saved/PersistentDownloadDir/CMS/DownloadCache.json"))["cache"])).Values)
        {
            // If the cache file is a lobby background
            if (!cacheFile["sourceUrl"].Contains("background") && !cacheFile["sourceUrl"].Contains("lobby")) continue;

            // Set the file path to the cache file
            filePath = cacheFile["filePath"].ToString();
        }

        // If the file path is empty
        if (string.IsNullOrWhiteSpace(filePath))
        {
            // Display an error message
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Could not find the background file!", "Could not find the background file! Contact support on Discord to get this resolved!", "error");
            Logger.Log("Could not find the background file!", LogLevel.Error); // Log the error
            return; // Return
        }
        
        Logger.Log("Found the background file!"); // Log the success

        Logger.Log("Searching for images..."); // Log the search for images
        
        // Get every image in the current directory and check if it ends with png or jpg, return a list of them
        var images = Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory).Where(x => x.EndsWith(".png") || x.EndsWith(".jpg"));
        
        Logger.Log("Found " + images.Count() + " images!"); // Log the number of images found
        
        Logger.Log("Setting images to a string array");
        var enumerable = images as string[] ?? images.ToArray(); // Set images to a string array
        
        // If there are no images, return
        if (!enumerable.Any())
        {
            // Display an error message
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Could not find any images!", "You don't have any '.jpg' or '.png' files in the current Saturn program directory.", "error");
            Logger.Log("Could not find any images to replace with!", LogLevel.Error); // Log the error
            return; // Return
        }
        
        // If there is more than one image, return
        if (enumerable.Count() > 1)
        {
            // Display an error message
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Too many images!", "You have more than one '.jpg' or '.png' file in the current Saturn program directory. Please only have one image in the directory.", "error");
            Logger.Log("Too many images to replace with!", LogLevel.Error); // Log the error
            return; // Return
        }
        
        Logger.Log("Moving the original image to Saturn cache..."); // Log the move to cache
        
        File.Move(filePath, Config.LobbyBackgroundPath); // Move the original image to the cache
        
        Logger.Log("Moving the new image to Fortnite's directory."); // Log the move to Fortnite's directory
        
        File.Move(enumerable.First(), filePath); // Move the new image to the Fortnite's directory
        
        _configService.ConfigFile.IsLobbyBackgroundConverted = true; // Set the config file to converted
        _configService.SaveConfig(); // Save the config file
        
        await _jsRuntime.InvokeVoidAsync("MessageBox", "Success!", "The background has been replaced!", "success"); // Display a success message
        Logger.Log("Successfully replaced the background!"); // Log the success
    }

    /// <summary>
    /// Checks if Fortnite is currently running and closes it if it is
    /// </summary>
    /// returns: True if Fortnite is running, false if not
    private async Task<bool> IsFortniteOpen()
    {
        var fortniteProcesses = Process.GetProcessesByName("FortniteClient-Win64-Shipping"); // Get the Fortnite process
        if (fortniteProcesses.Length == 0) fortniteProcesses = Process.GetProcessesByName("FortniteClient-Win64-Shipping_EAC"); // If there are no processes, try to get the EAC process
        if (fortniteProcesses.Length == 0) fortniteProcesses = Process.GetProcessesByName("FortniteClient-Win64-Shipping_BE"); // If there are no processes, try to get the BE process
        if (fortniteProcesses.Length == 0) fortniteProcesses = Process.GetProcessesByName("FortniteLauncher"); // If there are no processes, try to get the launcher process
        if (fortniteProcesses.Length == 0) return false; // If there are no processes, return false
        
        Logger.Log("Fortnite is running!"); // Log the process found
        
        foreach (var proc in fortniteProcesses) // For each process
            proc.Kill(); // Kill the process
        return true;
    }
    
    /// <summary>
    /// Reverts the background to the original
    /// </summary>
    private async Task RevertLobbyBG()
    {
        string filePath = ""; // Set the file path to null

        // Loop through each cache file Fortnite uses
        foreach (var cacheFile in JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, string>>>(JsonConvert.SerializeObject(JObject.Parse(File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "//FortniteGame/Saved/PersistentDownloadDir/CMS/DownloadCache.json"))["cache"])).Values)
        {
            if (!cacheFile["sourceUrl"].Contains("landscapev4") && !cacheFile["sourceUrl"].Contains("lobby")) continue; // If the source URL doesn't contain landscapev4, continue

            filePath = cacheFile["filePath"].ToString(); // Set the file path to the current cache file
        }

        // If the file path is empty
        if (string.IsNullOrWhiteSpace(filePath))
        {
            // Display an error message
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Could not find the background file!", "Could not find the background file! Contact support on Discord to get this resolved!", "error");
            Logger.Log("Could not find the background file!", LogLevel.Error); // Log the error
            return; // Return
        }
        Logger.Log("Found the background file!"); // Log the success

        Logger.Log("Searching for images..."); // Log the search for images
        if (!File.Exists(Config.LobbyBackgroundPath)) // If the original image doesn't exist
        {
            // Display an error message
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Could not find the original image!", "Could not find the original image! Contact support on Discord to get this resolved!", "error");
            Logger.Log("Could not find the original image!", LogLevel.Error); // Log the error
            return; // Return
        }

        Logger.Log("Deleting the current image..."); // Log the delete the current image
        File.Delete(filePath); // Delete the current image
        
        Logger.Log("Moving the original image to Fortnite's directory."); // Log the move to Fortnite's directory
        
        File.Move(Config.LobbyBackgroundPath, filePath); // Move the original image to the Fortnite's directory

        _configService.ConfigFile.IsLobbyBackgroundConverted = false; // Set the config file to not converted
        _configService.SaveConfig(); // Save the config file
        
        await _jsRuntime.InvokeVoidAsync("MessageBox", "Success!", "The background has been reverted to its original state!", "success"); // Display a success message
        Logger.Log("Successfully reverted the background!"); // Log the success
    }
}
