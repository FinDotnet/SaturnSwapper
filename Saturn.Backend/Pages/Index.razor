@inject IFortniteAPIService _fortniteAPIService
@inject ISwapperService _swapperService
@inject IDiscordRPCService _discordRPCService
@inject IConfigService _configService
@inject IJSRuntime _jsRuntime
@inject ISaturnAPIService _saturnAPIService

@page "/"
@using System.Net
@using DiscordRPC
@using System.Net.NetworkInformation
@using Saturn.Backend.Data.Enums
@using Saturn.Backend.Data.Models.FortniteAPI
@using Saturn.Backend.Data.Services
@using System.IO
@using Saturn.Backend.Data.Models.Items
@using Saturn.Backend.Data.Utils
@using System.Diagnostics
@using System.Runtime.ExceptionServices
@using System.Text.RegularExpressions
@using MudBlazor
@using Newtonsoft.Json
@using Saturn.Backend.Data.Models.SaturnAPI
@using Colors = Saturn.Backend.Data.Enums.Colors
@inherits LayoutComponentBase

<body>
<main>
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
        @if (saturnState == SaturnState.S_Maintenance)
        {
            <img src="img/Maintenance.png" alt="We are in maintenance right now! Check Discord for further updates!" style='background-position: center; width: 50%; height: 50%; border-radius: 5%; background-repeat: no-repeat;'/>
        }
        else if (saturnState == SaturnState.S_Update)
        {
            <img src @onerror=@(async() => await RunUpdate())>
        }
        else if (saturnState == SaturnState.S_Key)
        {
            <input type="text" class="key" placeholder="Enter key here" @oninput=@(async(e) => await CheckKey(e.Value.ToString()))>
        }
        else
        {
            <section class="glass">
            <div class="dashboard">
            <div class="user">
                @if (Username == null)
                {
                    <img class="avatar" src="https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/icon.png" alt="Discord Avatar"/>
                    <h3>Renegade Raider</h3>
                }
                else
                {
                    <img class="avatar" src="@Avatar" alt="Discord Avatar"/>
                    <h3>@Username</h3>
                }

                @if (Config.isBeta)
                {
                    <p>Beta User</p>
                }
                else
                {
                    <p>Free User</p>
                }
            </div>
            <div class="options" style="cursor: pointer">
                <div class="option" @onclick=@(async() => await GetSaturnSkins())>
                    <img src="img/UI/skins.png" alt="">
                    <h2>Skins</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnBackblings())>
                    <img src="img/UI/backblings.png" alt="">
                    <h2>Backblings</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnPickaxes())>
                    <img src="img/UI/pickaxes.png" alt="">
                    <h2>Pickaxes</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnEmotes())>
                    <img src="img/UI/emotes.png" alt="">
                    <h2>Emotes</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnMisc())>
                    <img src="img/UI/extra.png" alt="">
                    <h2>Misc</h2>
                </div>
                <div class="option" @onclick=@(async() => await GoToSettings())>
                    <img src="img/UI/settings.png" alt="">
                    <h2>Settings</h2>
                </div>

            </div>
        </div>
            <div class="items">
            @if (saturnState != SaturnState.S_Settings && saturnState != SaturnState.S_Dash && saturnState != SaturnState.S_Error)
            {
                <input type="text" placeholder="Search" style="text-indent: 10px; color:grey;" @oninput="@(async change => {await FilterItems(change.Value.ToString()); })"/>
                
                <select class="dropdown" name="searchType" id="searchType">
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_Name)) value="name">Name</option>
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_ID)) value="id">ID</option>
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_Set)) value="set">Set</option>
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_Season)) value="season">Season</option>
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_Rarity)) value="rarity">Rarity</option>
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_Series)) value="series">Series</option>
                    <option @onselect=@(async() => await SetSearchType(SearchType.ST_Source)) value="source">Source</option>
                </select>
            }
            
            @if (saturnState == SaturnState.S_Loading)
            {
                <div class="container" style="overflow: hidden;">
                    <div class="loader" style="    border: 16px solid transparent;
                                                                   border-top: 16px solid #8575cc; /* Blue */
                                                                   border-radius: 50%;
                                                                   background: #1d1f21;
                                                                   width: 120px;
                                                                   height: 120px;
                                                                   animation: spin 2s linear infinite;
                                                                   position: relative;
                                                                   margin-left:30%;">

                    </div>
                    <div class="loading">
                        <img class="loading" src="img/Saturn.png" alt="" style="width: 100px;
                                                                            height: 100px;
                                                                            position: relative;
                                                                            border-radius: 50%;
                                                                            margin-left:-48.5%;
                                                                            z-index: 100;
                                                                            margin-top: 8%"/>
                        <h2 style="margin-left: -165%; margin-top: 15%; white-space: nowrap; text-align: center">Please Wait</h2>
                        <p style="margin-left: -155%; white-space: nowrap; text-align: center">The swapper is generating the cosmetics...</p>
                    </div>
                </div>
            }
            else if (saturnState == SaturnState.S_Items)
            {
                <div class="container">
                    @foreach (var item in Items)
                    {
                        if (!item.IsPickingStyles)
                        {
                            <div class="card" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }

                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    @if (item.IsConverted)
                                    {
                                        <h2 style="color: green;">@item.Name</h2>
                                        <p style="color: green;">@item.Description</p>
                                    }
                                    else
                                    {
                                        <h2>@item.Name</h2>
                                        switch (item.PrintColor)
                                        {
                                            case Colors.C_WHITE:
                                                <p style="color:white">@item.Description</p>
                                                break;
                                            case Colors.C_YELLOW:
                                                <p style="color:yellow">@item.Description</p>
                                                break;
                                            case Colors.C_RED:
                                                <p style="color:red">@item.Description</p>
                                                break;
                                            case Colors.C_GREEN:
                                                <p style="color:green">@item.Description</p>
                                                break;
                                        }
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }

                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    @if (item.IsConverted)
                                    {
                                        <h2 style="color: green;">@item.Name</h2>
                                        <p style="color: green;">@item.Description</p>
                                    }
                                    else
                                    {
                                        <h2>@item.Name</h2>
                                        switch (item.PrintColor)
                                        {
                                            case Colors.C_WHITE:
                                                <p style="color:white">@item.Description</p>
                                                break;
                                            case Colors.C_YELLOW:
                                                <p style="color:yellow">@item.Description</p>
                                                break;
                                            case Colors.C_RED:
                                                <p style="color:red">@item.Description</p>
                                                break;
                                            case Colors.C_GREEN:
                                                <p style="color:green">@item.Description</p>
                                                break;
                                        }
                                    }
                                </div>

                                @foreach (var option in item.CosmeticOptions)
                                {
                                    <div style="cursor: help" @onclick=@(async () => await _swapperService.Swap(item, option, currentType, Items, false))>
                                        @if (option.Series != null)
                                        {
                                            <img class="base" src="img/Series/@(option.Series).png" alt=""/>
                                        }
                                        else
                                        {
                                            <img class="base" src="img/Rarity/@(option.Rarity.ToLower()).png" alt=""/>
                                        }

                                        <img class="icon" src="@option.Icon" alt=""/>
                                        <div class="card-info">
                                            @if (option.IsConverted)
                                            {
                                                <h2 style="color: green;">@option.Name</h2>
                                                <p style="color: green;">@option.Description</p>
                                            }
                                            else
                                            {
                                                <h2>@option.Name</h2>
                                                switch (option.PrintColor)
                                                {
                                                    case Colors.C_WHITE:
                                                        <p style="color:white">@option.Description</p>
                                                        break;
                                                    case Colors.C_YELLOW:
                                                        <p style="color:yellow">@option.Description</p>
                                                        break;
                                                    case Colors.C_RED:
                                                        <p style="color:red">@option.Description</p>
                                                        break;
                                                    case Colors.C_GREEN:
                                                        <p style="color:green">@option.Description</p>
                                                        break;

                                                }
                                            }
                                        </div>
                                    </div>
                                }

                            </div>
                        }
                    }

                </div>
            }
            else if (saturnState == SaturnState.S_Misc)
            {
                <div class="container">
                    @if (_configService.ConfigFile.IsLobbyBackgroundConverted)
                    {
                        <div class="card" @onclick=@(async () => await RevertLobbyBG())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="color: green;">Lobby BG</h2>
                                <p style="color:green">Changes your Fortnite lobby background to specified picture.</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card" @onclick=@(async () => await SwapLobbyBG())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2 style="color: white;">Lobby BG</h2>
                                <p style="color:white">Changes your Fortnite lobby background to specified picture.</p>
                            </div>
                        </div>
                    }
                    @foreach (var item in Items)
                    {
                        if (!item.IsPickingStyles)
                        {
                            <div class="card" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }

                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    @if (item.IsConverted)
                                    {
                                        <h2 style="color: green;">@item.Name</h2>
                                        <p style="color: green;">@item.Description</p>
                                    }
                                    else
                                    {
                                        <h2>@item.Name</h2>
                                        switch (item.PrintColor)
                                        {
                                            case Colors.C_WHITE:
                                                <p style="color:white">@item.Description</p>
                                                break;
                                            case Colors.C_YELLOW:
                                                <p style="color:yellow">@item.Description</p>
                                                break;
                                            case Colors.C_RED:
                                                <p style="color:red">@item.Description</p>
                                                break;
                                            case Colors.C_GREEN:
                                                <p style="color:green">@item.Description</p>
                                                break;
                                        }
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                @if (item.Series != null && item.Series != new Series() && !string.IsNullOrEmpty(item.Series.BackendValue))
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }

                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    @if (item.IsConverted)
                                    {
                                        <h2 style="color: green;">@item.Name</h2>
                                        <p style="color: green;">@item.Description</p>
                                    }
                                    else
                                    {
                                        <h2>@item.Name</h2>
                                        switch (item.PrintColor)
                                        {
                                            case Colors.C_WHITE:
                                                <p style="color:white">@item.Description</p>
                                                break;
                                            case Colors.C_YELLOW:
                                                <p style="color:yellow">@item.Description</p>
                                                break;
                                            case Colors.C_RED:
                                                <p style="color:red">@item.Description</p>
                                                break;
                                            case Colors.C_GREEN:
                                                <p style="color:green">@item.Description</p>
                                                break;
                                        }
                                    }
                                </div>

                                @foreach (var option in item.CosmeticOptions)
                                {
                                    <div style="cursor: help" @onclick=@(async () => await _swapperService.Swap(item, option, currentType, Items, false))>
                                        @if (option.Series != null)
                                        {
                                            <img class="base" src="img/Series/@(option.Series).png" alt=""/>
                                        }
                                        else
                                        {
                                            <img class="base" src="img/Rarity/@(option.Rarity.ToLower()).png" alt=""/>
                                        }

                                        <img class="icon" src="@option.Icon" alt=""/>
                                        <div class="card-info">
                                            @if (option.IsConverted)
                                            {
                                                <h2 style="color: green;">@option.Name</h2>
                                                <p style="color: green;">@option.Description</p>
                                            }
                                            else
                                            {
                                                <h2>@option.Name</h2>
                                                switch (option.PrintColor)
                                                {
                                                    case Colors.C_WHITE:
                                                        <p style="color:white">@option.Description</p>
                                                        break;
                                                    case Colors.C_YELLOW:
                                                        <p style="color:yellow">@option.Description</p>
                                                        break;
                                                    case Colors.C_RED:
                                                        <p style="color:red">@option.Description</p>
                                                        break;
                                                    case Colors.C_GREEN:
                                                        <p style="color:green">@option.Description</p>
                                                        break;

                                                }
                                            }
                                        </div>
                                    </div>
                                }

                            </div>
                        }
                    }

                </div>
            }
            else if (saturnState == SaturnState.S_Plugins)
            {
                <div class="plugins">
                    <input type="text" placeholder="Item Name"/>
                    <input type="text" placeholder="Item Description"/>
                    <input type="text" placeholder="Item Rarity"/>
                    <input type="text" placeholder="Item ID"/>
                    <input type="text" placeholder="Item Icon (Link)"/>
                </div>
            }
            else if (saturnState == SaturnState.S_Dash)
            {
                <div class="maindash">
                    <h2>Welcome to Saturn!</h2>
                    <p>To start, press the button on the left side of the screen corresponding to the item category you want to swap!</p>
                </div>
            }
            else if (saturnState == SaturnState.S_Error)
            {
                <img src @onerror=@(async() => await RunError())>
            }
            else if (saturnState == SaturnState.S_Settings)
            {
                <div class="container">
                    <div class="card" @onclick=@(async () => await RemoveDupedFiles())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Remove Duped UCAS</h2>
                            @switch (RemoveDupedColor)
                            {
                                case Colors.C_WHITE:
                                    <p style="color:white">@RemoveDuped</p>
                                    break;
                                case Colors.C_GREEN:
                                    <p style="color:green">@RemoveDuped</p>
                                    break;
                                case Colors.C_YELLOW:
                                    <p style="color:yellow">@RemoveDuped</p>
                                    break;
                                case Colors.C_RED:
                                    <p style="color:red">@RemoveDuped</p>
                                    break;
                            }
                        </div>
                    </div>

                    <div class="card" @onclick=@(async () => await ResetConfiguration())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Reset swapped items</h2>
                            @switch (ResetConfigColor)
                            {
                                case Colors.C_WHITE:
                                    <p style="color:white">@ResetConfig</p>
                                    break;
                                case Colors.C_GREEN:
                                    <p style="color:green">@ResetConfig</p>
                                    break;
                                case Colors.C_YELLOW:
                                    <p style="color:yellow">@ResetConfig</p>
                                    break;
                                case Colors.C_RED:
                                    <p style="color:red">@ResetConfig</p>
                                    break;
                            }
                        </div>
                    </div>

                    <div class="card" @onclick=@(async () => await Launch())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Launch Fortnite</h2>
                            @switch (LaunchFortniteColor)
                            {
                                case Colors.C_WHITE:
                                    <p style="color:white">@LaunchFortnite</p>
                                    break;
                                case Colors.C_GREEN:
                                    <p style="color:green">@LaunchFortnite</p>
                                    break;
                                case Colors.C_YELLOW:
                                    <p style="color:yellow">@LaunchFortnite</p>
                                    break;
                                case Colors.C_RED:
                                    <p style="color:red">@LaunchFortnite</p>
                                    break;
                            }
                        </div>
                    </div>
                    
                    <div class="card" @onclick=@(async () => await OpenLog())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Open Newest Log</h2>
                            @switch (OpenLogColor)
                            {
                                case Colors.C_WHITE:
                                    <p style="color:white">@OpenLogFile</p>
                                    break;
                                case Colors.C_GREEN:
                                    <p style="color:green">@OpenLogFile</p>
                                    break;
                                case Colors.C_YELLOW:
                                    <p style="color:yellow">@OpenLogFile</p>
                                    break;
                                case Colors.C_RED:
                                    <p style="color:red">@OpenLogFile</p>
                                    break;
                            }
                        </div>
                    </div>
                    
                    <div class="card" @onclick=@(async () => await FlipRarityOption())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Change rarity</h2>
                            <p style="color:white">@FlipRarity</p>
                        </div>
                    </div>
                    
                    <div class="card" @onclick=@(async () => await FlipSeriesOption())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Change series</h2>
                            <p style="color:white">@FlipSeries</p>
                        </div>
                    </div>

                    <div class="card" @onclick=@(async () => await ToggleShowStyles())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Show Styles</h2>
                            <p style="color:white">@ShowStyles</p>
                        </div>
                    </div>
                    
                    <div class="card" @onclick=@(async () => await ToggleCharacterParts())>
                        <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                        <div class="card-info">
                            <h2>Head or Hat?</h2>
                            <p style="color:white">@FlipCharacterPart</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                throw new AccessViolationException("You somehow got to a state that doesn't exist... like Alaska");
            }
            </div>
        </section>
        }

</main>
</body>
        

@code
{
    private List<Cosmetic> Items;
    private List<Cosmetic> BackupItems;
    
    private bool _halted;

    private string Avatar { get; set; }
    private string Username { get; set; }

    private ItemType currentType { get; set; }

    private string RemoveDuped = "This will remove all duplicated files from Fortnite (resetting all swaps) and reset the config.";
    private Colors RemoveDupedColor = Colors.C_YELLOW;
    
    private string ResetConfig = "This will reset the config to the default settings. WARNING: This will not unswap anything!";
    private Colors ResetConfigColor = Colors.C_YELLOW;
    
    private string LaunchFortnite = "This will launch Fortnite and prevent it from verifying your game on close.";
    private Colors LaunchFortniteColor = Colors.C_WHITE;

    private string OpenLogFile = "This will open the log file that correlates to the current swapper session.";
    private Colors OpenLogColor = Colors.C_WHITE;

    private string FlipRarity = "";
    private string ShowStyles = "";
    private string FlipSeries = "";
    private string FlipCharacterPart = "";

    private SaturnState saturnState = SaturnState.S_Key;

    private SearchType searchType = SearchType.ST_Name;

    private async Task SwitchItemStyleChoice(Cosmetic item)
        => item.IsPickingStyles = !item.IsPickingStyles;
    
    private async Task ShouldConvertSeries()
        => FlipSeries = await _configService.TryGetShouldSeriesConvert() ? "Currently set to 'pickaxes WILL swap series'" : "Currently set to 'pickaxes WILL NOT swap series'";
    
    private async Task ShouldConvertRarity()
        => FlipRarity = await _configService.TryGetShouldRarityConvert() ? "Currently set to 'pickaxes WILL swap rarity'" : "Currently set to 'pickaxes WILL NOT swap rarity'";

    private async Task ShouldShowStyles()
        => ShowStyles = await _configService.TryGetShouldShowStyles() 
            ? "Currently set to 'WILL show item styles.' This could cause performance issues on low-end PCs!" 
            : "Currently set to 'WILL NOT show item styles.' This could cause performance issues on low-end PCs!";

    private async Task ShouldFlipCharacterParts()
        => FlipCharacterPart = "Currently set to 'Default swaps will use a " + await _configService.TryGetHeadOrHatCharacterPart() + " character part'";

    protected override async Task OnInitializedAsync()
    {
        AppDomain.CurrentDomain.UnhandledException += UnhandledException;
        
        if (!CheckForInternetConnection())
            throw new WebException("No internet connection");

        await ShouldConvertRarity();

        await ShouldConvertSeries();

        await ShouldShowStyles();

        await ShouldFlipCharacterParts();

        var currentUser = _discordRPCService.Client.CurrentUser;

        for (int i = 0; i <= 5; i++)
        {
            if (currentUser == null)
            {
                await Task.Delay(500);
                currentUser = _discordRPCService.Client.CurrentUser;
            }
        }
        
        await CheckIfUserIsBeta();

        if (currentUser != null)
        {
            Avatar = currentUser.GetAvatarURL(User.AvatarFormat.PNG);
            Username = $"{currentUser.Username}#{currentUser.Discriminator}";
        }
        
        await CheckKey();

        await CheckUpdate();
        
        await CheckMaintenance();

        await CheckForOldFiles();

        await base.OnInitializedAsync();
    }
    
    private void UnhandledException(object sender, UnhandledExceptionEventArgs e)
    {
        if (_halted || e != null && !e.ToString().Contains("Saturn"))
            return;

        _halted = true;

        var stackTrace = "\n" + e.ToString().Split("--- ")[0];

        Logger.Log($"Unhandled exception occurred. {e.ToString().GetType().Name}: {e.ToString()} {stackTrace}", LogLevel.Fatal);

        Items = new List<Cosmetic>();
        saturnState = SaturnState.S_Error;

    }

    bool _once;
    private async Task CheckKey(string? key = null)
    {
        var keyToUse = key ?? _configService.ConfigFile.Key;

        if (JsonConvert.DeserializeObject<bool>(await _saturnAPIService.ReturnEndpointAsync($"/api/v1/Saturn/ReturnKeyExists?key={keyToUse}")))
        {
            _configService.ConfigFile.Key = keyToUse;
            _configService.SaveConfig();
            saturnState = SaturnState.S_Dash;
            await FileUtil.OpenBrowser(JsonConvert.DeserializeObject<IndexModel>(await _saturnAPIService.ReturnEndpointAsync("/")).DiscordServer);
        }
        else if (Config.isBeta)
            saturnState = SaturnState.S_Dash;
        else if (!_once)
        {
            FileUtil.OpenBrowser(JsonConvert.DeserializeObject<IndexModel>(await _saturnAPIService.ReturnEndpointAsync("/")).KeyLink);
            _once = true;
        }

    }

    private async Task CheckIfUserIsBeta()
    {
        if (_discordRPCService.Client.CurrentUser == null)
        {
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Couldn't get Discord user info!", "Please open discord if you intend to use BETA features!", "error");
            return;
        }
        
        var user = _discordRPCService.Client.CurrentUser;

        ulong userID = 0u;
        try
        {
            userID = user.ID;
        }
        catch
        {
            Logger.Log("Could not get user ID. Is user using Discord web?", LogLevel.Error);
        }
        
        var betaUsers = await GetBetaIDs();
        
        foreach (var _ in betaUsers.Where(betaUser => betaUser == userID))
            Config.isBeta = true;
        

        if (!Config.isBeta)
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Detected you are not a BETA user!", "Boost Tamely's Discord if you want to use BETA features!", "error");
    }
    
    private async Task<List<ulong>> GetBetaIDs()
    {
        var json = await _saturnAPIService.ReturnEndpointAsync("/api/v1/Saturn/GetBeta");
        return JsonConvert.DeserializeObject<List<ulong>>(json);
    }

    private async Task CheckMaintenance()
    {
        if (await GetFortniteBuild() != await GetLastestVersion())
            Config.isMaintenance = true;
    }

    private async Task CheckForOldFiles()
    {
        if (await _configService.TryGetFortniteVersion() != await GetLastestVersion())
        {
            Logger.Log(await _configService.TryGetFortniteVersion());
            RemoveDupedFiles();
            await _jsRuntime.InvokeVoidAsync("MessageBox", "Detected old backups!", "The swapper has automatically removed them for you!", "warning");

            await _configService.TrySetFortniteVersion(await GetLastestVersion());
        }
    }
    
    private async Task CheckUpdate()
    {
        if (Constants.UserVersion != await GetSwapperVersion())
            saturnState = SaturnState.S_Update;
    }

    private async Task<string> GetFortniteBuild()
    {
        var data = await _saturnAPIService.ReturnEndpointAsync("/");
        return JsonConvert.DeserializeObject<IndexModel>(data).APIVersion;
    }

    private async Task<string> GetSwapperVersion()
    {
        var data = await _saturnAPIService.ReturnEndpointAsync("/");
        return JsonConvert.DeserializeObject<IndexModel>(data).swapperVersion;
    }
    
    private async Task<string> GetLastestVersion()
    {
        return _fortniteAPIService.GetAES().Build;
    }

    private async Task RunError()
    {
        await _jsRuntime.InvokeVoidAsync("MessageBox", "There has been an error that we were not able to recover from!", "Please send your logs in Saturn Support so we are able to solve it for you!");

        await Task.Delay(1500);

        Process.Start("notepad.exe", Config.LogFile);
    }
    
    private async Task RunUpdate()
    {
        await _jsRuntime.InvokeVoidAsync("MessageBox", "There is a swapper update ready to download!", "Please download it from Tamely's Discord.", "error");
        await FileUtil.OpenBrowser(JsonConvert.DeserializeObject<IndexModel>(await _saturnAPIService.ReturnEndpointAsync("/")).DiscordServer);
    }
    
    private async Task FilterItems(string input)
    {
        Items = new List<Cosmetic>(BackupItems);
        
        searchType = (SearchType) await _jsRuntime.InvokeAsync<int>("GetSelectedElement");
        

        switch (searchType)
        {
            case SearchType.ST_Name:
                Items.RemoveAll(x => !FilterString(x.Name.ToLower()).Contains(FilterString(input.ToLower())));
                break;
            case SearchType.ST_ID:
                Items.RemoveAll(x => !FilterString(x.Id.ToLower()).Contains(FilterString(input.ToLower())));
                break;
            case SearchType.ST_Rarity:
                Items.RemoveAll(x => !FilterString(x.Rarity.BackendValue.ToLower().Replace("efortrarity::", "")).StartsWith(FilterString(input.ToLower())));
                break;
            case SearchType.ST_Set:
                Items.RemoveAll(x =>
                {
                    if (x.GameplayTags == null || x.GameplayTags.Count == 0 || x.GameplayTags == new List<string>())
                        return true;
                    
                    return x.GameplayTags.Count(tag => FilterString(tag.ToLower()).Contains(FilterString(input.ToLower())) && tag.ToLower().Contains("set")) <= 0;
                });
                break;
            case SearchType.ST_Season:
                Items.RemoveAll(x =>
                {
                    if (x.GameplayTags == null || x.GameplayTags.Count == 0 || x.GameplayTags == new List<string>())
                        return true;
                    
                    return x.GameplayTags.Count(tag => tag.ToLower().Equals($"cosmetics.filter.season.{input}")) <= 0;
                });
                break;
            case SearchType.ST_Series:
                Items.RemoveAll(x =>
                {
                    if (x.Series == null || x.Series == new Series() || x.Series.Value == null)
                        return true;

                    return !FilterString(x.Series.Value.ToLower()).Contains(FilterString(input.ToLower()));
                });
                break;
            case SearchType.ST_Source:
                Items.RemoveAll(x =>
                {
                    if (x.GameplayTags == null || x.GameplayTags.Count == 0 || x.GameplayTags == new List<string>())
                        return true;
                    
                    return x.GameplayTags.Count(tag => FilterString(tag.ToLower()).Contains(FilterString(input.ToLower())) && tag.ToLower().Contains("source")) <= 0;
                });
                break;
            default:
                throw new ArgumentOutOfRangeException("How tf did you select a search type that doesn't exist?");
        }
        
        
    }

    private string FilterString(string input)
        => Regex.Replace(input, @"[^0-9a-zA-Z]+", "");

    private async Task FlipRarityOption()
    {
        await _configService.TrySetShouldRarityConvert(!await _configService.TryGetShouldRarityConvert());

        FlipRarity = await _configService.TryGetShouldRarityConvert() switch
        {
            true => "Currently set to 'pickaxes WILL swap rarity'",
            false => "Currently set to 'pickaxes WILL NOT swap rarity'"
        };
    }

    private async Task FlipSeriesOption()
    {
        await _configService.TrySetShouldSeriesConvert(!await _configService.TryGetShouldSeriesConvert());

        FlipSeries = await _configService.TryGetShouldSeriesConvert() switch
        {
            true => "Currently set to 'pickaxes WILL swap series'",
            false => "Currently set to 'pickaxes WILL NOT swap series'"
        };
    }

    private async Task ToggleCharacterParts()
    {
        switch (await _configService.TryGetHeadOrHatCharacterPart())
        {
            case "Head":
                await _configService.TrySetHeadOrHatCharacterPart("Hat");
                break;
            case "Hat":
                await _configService.TrySetHeadOrHatCharacterPart("Head");
                break;
        }
        
        FlipCharacterPart = "Currently set to 'Default swaps will use a " + await _configService.TryGetHeadOrHatCharacterPart() + " character part'";
    }

    private async Task ToggleShowStyles()
    {
        await _configService.TrySetShouldShowStyles(!await _configService.TryGetShouldShowStyles());

        ShowStyles = await _configService.TryGetShouldShowStyles() switch
        {
            true => "Currently set to 'WILL show item styles.' This could cause performance issues on low-end PCs!",
            false => "Currently set to 'WILL NOT show item styles.' This could cause performance issues on low-end PCs!"
        };
    }

    private async Task OpenLog()
    {
        Process.Start("notepad.exe", Config.LogFile);
    }

    private async Task Launch()
    {
        Process.Start(new ProcessStartInfo
        {
            FileName = "cmd.exe",
            Arguments = "/c start com.epicgames.launcher://apps/Fortnite?action=launch&silent=true",
            WindowStyle = ProcessWindowStyle.Hidden,
            CreateNoWindow = true
        });
        
        LaunchFortnite = "Fortnite is launching... please wait.";
        LaunchFortniteColor = Colors.C_GREEN;

        await WaitForFortnite();
        
        LaunchFortnite = "Epic Games Launcher has been closed which stopped the verification process.";
        LaunchFortniteColor = Colors.C_GREEN;
        
        
        await Task.Delay(5000);
        
        LaunchFortnite = "This will launch Fortnite and prevent it from verifying your game on close.";
        LaunchFortniteColor = Colors.C_WHITE;
    }

    private async Task WaitForFortnite()
    {
        while (Process.GetProcessesByName("FortniteClient-Win64-Shipping").Length == 0)
        {
            // Give it a half a second break until we check if it launched
            await Task.Delay(500);
        }
        
        // It has launched!
        LaunchFortnite = "Fortnite has launched!";

        await Task.Delay(5000);

        LaunchFortnite = "Waiting for Fortnite to close...";
        LaunchFortniteColor = Colors.C_WHITE;
        
        while (Process.GetProcessesByName("FortniteClient-Win64-Shipping").Length != 0)
        {
            // Give it a 2 second break until we check if it closed
            await Task.Delay(2000);
        }
        
        foreach (var process in Process.GetProcesses())
            if (process.ProcessName == "EpicGamesLauncher")
                process.Kill();
    }

    private async Task ResetConfiguration()
    {
        _configService.ConfigFile = new Saturn.Backend.Data.Models.Configuration();
        _configService.SaveConfig();
        
        ResetConfig = "Reset the swapper's config to default settings!";
        ResetConfigColor = Colors.C_GREEN;
        
        await Task.Delay(5000);

        ResetConfig = "This will reset the config to the default settings. WARNING: if you swapped something and need to revert it, you wont be able to!";
        ResetConfigColor = Colors.C_YELLOW;
    }

    private async Task RemoveDupedFiles()
    {
        foreach (var file in Directory.EnumerateFiles(FortniteUtil.PakPath))
            if (file.Contains("Saturn"))
                File.Delete(file);
        
        if (!Directory.Exists(Config.CompressedDataPath))
            Logger.Log("Compressed data path was not found! Did you not swap anything?", LogLevel.Fatal);
        else
            Directory.Delete(Config.CompressedDataPath, true);
        
        if (!Directory.Exists(Config.DecompressedDataPath))
            Logger.Log("Decompressed data path was not found! Did you not swap anything?", LogLevel.Fatal);
        else
            Directory.Delete(Config.DecompressedDataPath, true);

        _configService.ConfigFile = new Saturn.Backend.Data.Models.Configuration();
        _configService.SaveConfig();
        
        RemoveDuped = "Removed all duplicated files from Fortnite!";
        RemoveDupedColor = Colors.C_GREEN;
        
        await Task.Delay(5000);

        RemoveDuped = "This will remove all duplicated files from Fortnite (resetting all swaps) and reset the config.";
        RemoveDupedColor = Colors.C_YELLOW;
    }

    private async Task GoToSettings()
        => saturnState = SaturnState.S_Settings;

    private async Task SetSearchType(SearchType searchType)
        => this.searchType = searchType;

    private async Task GetSaturnSkins()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnSkins();
        BackupItems = new List<Cosmetic>(Items);
        currentType = ItemType.IT_Skin;
        saturnState = SaturnState.S_Items;
    }
    
    private async Task GetSaturnMisc()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnMisc();
        BackupItems = new List<Cosmetic>(Items);
        currentType = ItemType.IT_Misc;
        saturnState = SaturnState.S_Misc;
    }

    private async Task GetSaturnBackblings()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnBackblings();
        
        foreach (var item in Items.Where(item => !item.IsCloudAdded))
        {
            item.CosmeticOptions = new()
            {
                new SaturnItem
                {
                    ItemDefinition = "BID_695_StreetFashionEclipse",
                    Name = "Blackout Bag",
                    Description = "They'll never know what's up.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/bid_695_streetfashioneclipse/smallicon.png",
                    Rarity = "Epic",
                    Series = "ShadowSeries"
                },
                new SaturnItem
                {
                    ItemDefinition = "BID_600_HightowerTapas",
                    Name = "Thor's Cloak",
                    Description = "Thor's Herald Cloak.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/bid_600_hightowertapas/smallicon.png",
                    Rarity = "Epic"
                },
                new SaturnItem
                {
                    ItemDefinition = "BID_678_CardboardCrewHolidayMale",
                    Name = "Thor's Cape",
                    Description = "Crinkling gracefully in the winter wind.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/BID_678_CardboardCrewHolidayMale/smallicon.png",
                    Rarity = "Rare"
                },
                new SaturnItem
                {
                    ItemDefinition = "BID_430_GalileoSpeedBoat_9RXE3",
                    Name = "The Sith",
                    Description = "Force-wielders devoted to the dark side.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/bid_430_galileospeedboat_9rxe3/smallicon.png",
                    Rarity = "Epic",
                    Series = "ColumbusSeries"
                }
            };
        }
        
        BackupItems = new List<Cosmetic>(Items);
        currentType = ItemType.IT_Backbling;
        saturnState = SaturnState.S_Items;
    }

    private async Task GetSaturnEmotes()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnDances();

        foreach (var item in Items.Where(item => !item.IsCloudAdded))
        {
            item.CosmeticOptions = new()
            {
                new SaturnItem
                {
                    ItemDefinition = "EID_DanceMoves",
                    Name = "Dance Moves",
                    Description = "Express yourself on the battlefield.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/eid_dancemoves/smallicon.png",
                    Rarity = "Common"
                },
                new SaturnItem
                {
                    ItemDefinition = "EID_BoogieDown",
                    Name = "Boogie Down",
                    Description = "Boogie Down with Populotus.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/eid_boogiedown/smallicon.png",
                    Rarity = "Epic"
                }
            };
        }
        BackupItems = new List<Cosmetic>(Items);
        currentType = ItemType.IT_Dance;
        saturnState = SaturnState.S_Items;
    }
    
    private async Task GetSaturnPickaxes()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnPickaxes();

        foreach (var item in Items.Where(item => !item.IsCloudAdded))
        {
            item.CosmeticOptions = new()
            {
                new SaturnItem
                {
                    ItemDefinition = "Pickaxe_ID_408_MastermindShadow",
                    Name = "Mayhem Scythe",
                    Description = "Mayhem is golden...",
                    Icon =
                        "https://fortnite-api.com/images/cosmetics/br/pickaxe_id_408_mastermindshadow/smallicon.png",
                    Rarity = "Rare"
                },
                new SaturnItem
                {
                    ItemDefinition = "Pickaxe_ID_541_StreetFashionEclipseFemale",
                    Name = "Shadow Slicer",
                    Description = "Not even the darkness is safe.",
                    Icon =
                        "https://fortnite-api.com/images/cosmetics/br/pickaxe_id_541_streetfashioneclipsefemale/smallicon.png",
                    Rarity = "Epic",
                    Series = "ShadowSeries"
                },
                new SaturnItem
                {
                    ItemDefinition = "DefaultPickaxe",
                    Name = "Default Pickaxe",
                    Description = "Perfectly unremarkable.",
                    Icon =
                        "https://fortnite-api.com/images/cosmetics/br/defaultpickaxe/smallicon.png",
                    Rarity = "Common"
                },
                new SaturnItem
                {
                    ItemDefinition = "Pickaxe_ID_713_GumballMale",
                    Name = "Gum Brawler",
                    Description = "Long-lasting sticky sledge action.",
                    Icon =
                        "https://fortnite-api.com/images/cosmetics/br/pickaxe_id_713_gumballmale/smallicon.png",
                    Rarity = "Rare"
                }
            };
        }
        BackupItems = new List<Cosmetic>(Items);
        currentType = ItemType.IT_Pickaxe;
        saturnState = SaturnState.S_Items;
    }

    private async Task SwapLobbyBG()
    {
        await _jsRuntime.InvokeVoidAsync("MessageBox", "This feature is not yet implemented!", "This button is here to remind Tamely to add it, so look forward to it being here soon!", "warning");
    }

    private async Task RevertLobbyBG()
    {
        
    }

    // Taken from Darkblade on Twilight
    private static bool CheckForInternetConnection()
    {
        using var ping = new Ping();
        try
        {
            var reply = ping.Send("google.com", 5000);
            return reply.Status == IPStatus.Success;
        }
        catch
        {
            return false;
        }
    }
}