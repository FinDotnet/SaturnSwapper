@inject IFortniteAPIService _fortniteAPIService
@inject ISwapperService _swapperService
@inject IDiscordRPCService _discordRPCService
@inject IConfigService _configService

@page "/"
@using System.Net
@using DiscordRPC
@using System.Net.NetworkInformation
@using Saturn.Backend.Data.Enums
@using Saturn.Backend.Data.Models.FortniteAPI
@using Saturn.Backend.Data.Services
@using System.IO
@using Saturn.Backend.Data.Models.Items
@using Saturn.Backend.Data.Utils
@inherits LayoutComponentBase

<body>
<main>
        @if (saturnState == SaturnState.S_Maintenence)
        {
            <img src="img/Maintenance.png" alt="We are in maintenance right now! Check Discord for further updates!" style='background-position: center; width: 50%; height: 50%; border-radius: 5%; background-repeat: no-repeat;'/>
        }
        else
        {
            <section class="glass">
        <div class="dashboard">
            <div class="user">
                @if (Username == null)
                {
                    <img class="avatar" src="https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/icon.png" alt="Discord Avatar"/>
                    <h3>Renegade Raider</h3>
                }
                else
                {
                    <img class="avatar" src="@Avatar" alt="Discord Avatar"/>
                    <h3>@Username</h3>
                }

                @if (true)
                {
                    <p>Beta User</p>
                }
                else
                {
                    <p>Free User</p>
                }
            </div>
            <div class="options" style="cursor: pointer">
                <div class="option" @onclick=@(async() => await GetSaturnSkins())>
                    <img src="img/UI/skins.png" alt="">
                    <h2>Skins</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnBackblings())>
                    <img src="img/UI/backblings.png" alt="">
                    <h2>Backblings</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnPickaxes())>
                    <img src="img/UI/pickaxes.png" alt="">
                    <h2>Pickaxes</h2>
                </div>
                <div class="option" @onclick=@(async() => await GetSaturnEmotes())>
                    <img src="img/UI/emotes.png" alt="">
                    <h2>Emotes</h2>
                </div>
                <div class="option">
                    <img src="img/UI/plugins.png" alt="">
                    <h2>Plugins</h2>
                </div>
                <div class="option" @onclick=@(async() => await GoToSettings())>
                    <img src="img/UI/settings.png" alt="">
                    <h2>Settings</h2>
                </div>

            </div>
        </div>
        <div class="items">
            <input type="text" placeholder="  Search" style="color:grey"/>
            @if (saturnState == SaturnState.S_Loading)
            {
                <div class="container" style="overflow: hidden;">
                    <div class="loader" style="    border: 16px solid transparent;
                                                                   border-top: 16px solid #8575cc; /* Blue */
                                                                   border-radius: 50%;
                                                                   background: #1d1f21;
                                                                   width: 120px;
                                                                   height: 120px;
                                                                   animation: spin 2s linear infinite;
                                                                   position: relative;
                                                                   margin-left:30%;">

                    </div>
                    <div class="loading">
                        <img class="loading" src="img/Saturn.png" alt="" style="width: 100px;
                                                                            height: 100px;
                                                                            position: relative;
                                                                            border-radius: 50%;
                                                                            margin-left:-48.5%;
                                                                            z-index: 100;
                                                                            margin-top: 8%"/>
                        <h2 style="margin-left: -165%; margin-top: 15%; white-space: nowrap; text-align: center">Please Wait</h2>
                        <p style="margin-left: -155%; white-space: nowrap; text-align: center">The swapper is generating the cosmetics...</p>
                    </div>
                </div>
            }
            else if (saturnState == SaturnState.S_Items)
            {
                <div class="container">
                    @foreach (var item in Items)
                    {
                        if (!item.IsPickingStyles)
                        {
                            <div class="card" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                            @if (item.Series != null)
                            {
                                <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                            }
                            else
                            {
                                <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                            }

                            <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                            <div class="card-info">
                                @if (item.IsConverted)
                                {
                                    <h2 style="color: green;">@item.Name</h2>
                                    <p style="color: green;">@item.Description</p>
                                }
                                else
                                {
                                    <h2>@item.Name</h2>
                                    switch (item.PrintColor)
                                    {
                                        case Colors.C_WHITE:
                                            <p style="color:white">@item.Description</p>
                                            break;
                                        case Colors.C_YELLOW:
                                            <p style="color:yellow">@item.Description</p>
                                            break;
                                        case Colors.C_RED:
                                            <p style="color:red">@item.Description</p>
                                            break;
                                        case Colors.C_GREEN:
                                            <p style="color:green">@item.Description</p>
                                            break;
                                    }
                                }
                            </div>
                        </div>
                        }
                        else
                        {
                            <div class="card" style="height: @(70 * (item.CosmeticOptions.Count + 1))px" id="item-@item.Id" @onclick=@(async () => await SwitchItemStyleChoice(item))>
                                @if (item.Series != null)
                                {
                                    <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                }
                                else
                                {
                                    <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/>
                                }

                                <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                <div class="card-info">
                                    @if (item.IsConverted)
                                    {
                                        <h2 style="color: green;">@item.Name</h2>
                                        <p style="color: green;">@item.Description</p>
                                    }
                                    else
                                    {
                                        <h2>@item.Name</h2>
                                        switch (item.PrintColor)
                                        {
                                            case Colors.C_WHITE:
                                                <p style="color:white">@item.Description</p>
                                                break;
                                            case Colors.C_YELLOW:
                                                <p style="color:yellow">@item.Description</p>
                                                break;
                                            case Colors.C_RED:
                                                <p style="color:red">@item.Description</p>
                                                break;
                                            case Colors.C_GREEN:
                                                <p style="color:green">@item.Description</p>
                                                break;
                                        }
                                    }
                                </div>
                                
                                @foreach (var option in item.CosmeticOptions)
                                {
                                    <div style="cursor: help" @onclick=@(async () => await _swapperService.Swap(item, option, currentType, Items, false))>
                                        @if (option.Series != null)
                                        {
                                            <img class="base" src="img/Series/@(option.Series).png" alt=""/>
                                        }
                                        else
                                        {
                                            <img class="base" src="img/Rarity/@(option.Rarity.ToLower()).png" alt=""/>
                                        }
                                        
                                        <img class="icon" src="@option.Icon" alt=""/>
                                        <div class="card-info">
                                            @if (option.IsConverted)
                                            {
                                                <h2 style="color: green;">@option.Name</h2>
                                                <p style="color: green;">@option.Description</p>
                                            }
                                            else
                                            {
                                                <h2>@option.Name</h2>
                                                switch (option.PrintColor)
                                                {
                                                    case Colors.C_WHITE:
                                                        <p style="color:white">@option.Description</p>
                                                        break;
                                                    case Colors.C_YELLOW:
                                                        <p style="color:yellow">@option.Description</p>
                                                        break;
                                                    case Colors.C_RED:
                                                        <p style="color:red">@option.Description</p>
                                                        break;
                                                    case Colors.C_GREEN:
                                                        <p style="color:green">@option.Description</p>
                                                        break;
                                                    
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                
                            </div>
                        }
                    }

                    </div>
                }
                else if (saturnState == SaturnState.S_Plugins)
                {

                }
                else if (saturnState == SaturnState.S_Dash)
                {
                    
                }
                else if (saturnState == SaturnState.S_Settings)
                {
                    <div class="container">
                        <div class="card" @onclick=@(async () => await RemoveDupedFiles())>
                            <img class="base" src="img/Series/2020AnnualPassSeries.png" alt=""/>
                            <div class="card-info">
                                <h2>Remove Duped UCAS</h2>
                                @switch (RemoveDupedColor)
                                {
                                    case Colors.C_WHITE:
                                        <p style="color:white">@RemoveDuped</p>
                                        break;
                                    case Colors.C_GREEN:
                                        <p style="color:green">@RemoveDuped</p>
                                        break;
                                    case Colors.C_YELLOW:
                                        <p style="color:yellow">@RemoveDuped</p>
                                        break;
                                    case Colors.C_RED:
                                        <p style="color:red">@RemoveDuped</p>
                                        break;
                                }
                            </div>
                        </div>

                    </div>
                }
                else
                {
                    throw new AccessViolationException("You somehow got to a state that doesn't exist... like Alaska");
                }
            </div>
        </section>
        }

</main>
</body>
        

@code
{
    public List<Cosmetic> Items;

    public string Avatar { get; set; }
    public string Username { get; set; }

    public ItemType currentType { get; set; }

    private string RemoveDuped = "This will remove all duplicated files from Fortnite (resetting all swaps) and reset the config.";
    private Colors RemoveDupedColor = Colors.C_YELLOW;

    public SaturnState saturnState = SaturnState.S_Dash;

    private async Task SwitchItemStyleChoice(Cosmetic item)
        => item.IsPickingStyles = !item.IsPickingStyles;


    protected override async Task OnInitializedAsync()
    {
        if (!CheckForInternetConnection())
            throw new WebException("No internet connection");

        var currentUser = _discordRPCService.Client.CurrentUser;
        while (currentUser == null)
        {
            await Task.Delay(200);
            currentUser = _discordRPCService.Client.CurrentUser;
        }

        if (currentUser != null)
        {
            Avatar = currentUser.GetAvatarURL(User.AvatarFormat.PNG);
            Username = $"{currentUser.Username}#{currentUser.Discriminator}";
        }

        await base.OnInitializedAsync();
    }

    private async Task RemoveDupedFiles()
    {
        foreach (var file in Directory.EnumerateFiles(FortniteUtil.PakPath))
            if (file.Contains("Saturn"))
                File.Delete(file);
        
        if (!Directory.Exists(Config.CompressedDataPath))
            Logger.Log("Compressed data path was not found! Did you not swap anything?", LogLevel.Fatal);
        else
            Directory.Delete(Config.CompressedDataPath, true);
        
        if (!Directory.Exists(Config.DecompressedDataPath))
            Logger.Log("Decompressed data path was not found! Did you not swap anything?", LogLevel.Fatal);
        else
            Directory.Delete(Config.DecompressedDataPath, true);

        _configService.ConfigFile = new Saturn.Backend.Data.Models.Configuration();
        _configService.SaveConfig();
        
        RemoveDuped = "Removed all duplicated files from Fortnite!";
        RemoveDupedColor = Colors.C_GREEN;
        
        await Task.Delay(5000);

        RemoveDuped = "This will remove all duplicated files from Fortnite (resetting all swaps) and reset the config.";
        RemoveDupedColor = Colors.C_YELLOW;
    }

    private async Task CheckForMaintenance()
    {
        if (_fortniteAPIService.GetAES().Build != FortniteUtil.GetFortniteVersion())
            saturnState = SaturnState.S_Maintenence;
    }

    private async Task GoToSettings()
        => saturnState = SaturnState.S_Settings;


    private async Task GetSaturnSkins()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnSkins();
        currentType = ItemType.IT_Skin;
        saturnState = SaturnState.S_Items;
    }

    private async Task GetSaturnBackblings()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnBackblings();
        currentType = ItemType.IT_Backbling;
        saturnState = SaturnState.S_Items;
    }

    private async Task GetSaturnEmotes()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnDances();

        foreach (var item in Items)
        {
            item.CosmeticOptions = new()
            {
                new SaturnItem
                {
                    ItemDefinition = "EID_DanceMoves",
                    Name = "Dance Moves",
                    Description = "Express yourself on the battlefield.", 
                    Icon = 
                        "https://fortnite-api.com/images/cosmetics/br/eid_dancemoves/smallicon.png",
                    Rarity = "Common"
                }
            };
        }
        currentType = ItemType.IT_Dance;
        saturnState = SaturnState.S_Items;
    }
    
    private async Task GetSaturnPickaxes()
    {
        saturnState = SaturnState.S_Loading;
        Items = await _fortniteAPIService.GetSaturnPickaxes();

        foreach (var item in Items)
        {
            item.CosmeticOptions = new()
            {
                new SaturnItem
                {
                    ItemDefinition = "DefaultPickaxe",
                    Name = "Default Pickaxe",
                    Description = "Perfectly unremarkable.",
                    Icon =
                        "https://fortnite-api.com/images/cosmetics/br/defaultpickaxe/smallicon.png",
                    Rarity = "Common"
                }
            };
        }
        currentType = ItemType.IT_Pickaxe;
        saturnState = SaturnState.S_Items;
    }

    // Taken from Darkblade on Twilight
    private static bool CheckForInternetConnection()
    {
        using var ping = new Ping();
        try
        {
            var reply = ping.Send("google.com", 5000);
            return reply.Status == IPStatus.Success;
        }
        catch
        {
            return false;
        }
    }
}