@using System.Net.NetworkInformation
@using System.Net
@using DiscordRPC
@using Saturn.Data.Enums
@using Saturn.Data.Models.FortniteAPI
@using Saturn.Data.Services
@using System.Diagnostics


@inject IFortniteAPIService _fortniteAPIService
@inject ISwapperService _swapperService
@inject IDiscordRPCService _discordRPCService


@inherits LayoutComponentBase

<body>
<main>
    @if (false)
    {
        <img src="img/Maintenance.png" alt="We are in maintenance right now! Check Discord for further updates!" style='background-position: center; width: 50%; height: 50%; border-radius: 5%; background-repeat: no-repeat;'/>
    }
    else
    {
        <section class="glass">
            <div class="dashboard">
                <div class="user">
                    @if (Username == null)
                    {
                        <img class="avatar" src="https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/icon.png" alt="Discord Avatar"/>
                        <h3>Renegade Raider</h3>  
                    }
                    else
                    {
                        <img class="avatar" src="@Avatar" alt="Discord Avatar"/>
                        <h3>@Username</h3>
                    }
                        
                    @if (true)
                    {
                        <p>Beta User</p>
                    }
                    else
                    {
                        <p>Free User</p>
                    }
                </div>
                <div class="options" style="cursor: pointer">
                    <div class="option" @onclick=@(async() => await GetSaturnSkins())>
                        <img src="img/UI/skins.png" alt="">
                        <h2>Skins</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GetSaturnBackblings())>
                        <img src="img/UI/backblings.png" alt="">
                        <h2>Backblings</h2>
                    </div>
                    <div class="option">
                        <img src="img/UI/pickaxes.png" alt="">
                        <h2>Pickaxes</h2>
                    </div>
                    <div class="option" @onclick=@(async() => await GetSaturnEmotes())>
                        <img src="img/UI/emotes.png" alt="">
                        <h2>Emotes</h2>
                    </div>
                    <div class="option">
                        <img src="img/UI/plugins.png" alt="">
                        <h2>Plugins</h2>
                    </div>
                    <div class="option">
                        <img src="img/UI/settings.png" alt="">
                        <h2>Settings</h2>
                    </div>

                </div>
            </div>
            <div class="items">
                <input type="text" placeholder="  Search"/>
                @if (Items == null)
                {
                    <div class="container" style="overflow: hidden;">
                        <div class="loader" style="    border: 16px solid transparent;
                                                                   border-top: 16px solid #8575cc; /* Blue */
                                                                   border-radius: 50%;
                                                                   background: #1d1f21;
                                                                   width: 120px;
                                                                   height: 120px;
                                                                   animation: spin 2s linear infinite;
                                                                   position: absolute;
                                                                   margin-left:30%;">

                        </div>
                        <div class="loading">
                            <img class="loading" src="img/Saturn.png" alt="" style="width: 100px;
                                                                            height: 100px;
                                                                            position: absolute;
                                                                            border-radius: 50%;
                                                                            margin-left:32.5%;
                                                                            z-index: 100;
                                                                            margin-top: 2.5%"/>
                            <h2 style="margin-left: 101.5%; margin-top: 50%; white-space: nowrap; text-align: center">Please Wait</h2>
                            <p style="margin-left: 75%; white-space: nowrap; text-align: center">The swapper is generating the cosmetics...</p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="container">
                        @foreach (var item in Items)
                            {
                                <div class="card" id="item-@item.Id" @onclick=@(async()=> await _swapperService.Swap(@item, currentType, true))>
                                    @if (item.Series != null)
                                    {
                                        <img class="base" src="img/Series/@(item.Series.BackendValue).png" alt=""/>
                                    }
                                    else
                                    {
                                       <img class="base" src="img/Rarity/@(item.Rarity.Value.ToLower()).png" alt=""/> 
                                    }

                                    <img class="icon" src="@item.Images.SmallIcon" alt=""/>
                                    <div class="card-info">
                                        @if (item.IsConverted)
                                        {
                                            <h2 style="color: green;">@item.Name</h2>
                                            <p style="color: green;">@item.Description</p>
                                        }
                                        else
                                        {
                                            <h2>@item.Name</h2>
                                            @switch(item.PrintColor)
                                            {
                                                case Colors.C_WHITE:
                                                    <p style="color: white">@item.Description</p>
                                                    break;
                                                case Colors.C_YELLOW:
                                                    <p style="color: yellow">@item.Description</p>
                                                    break;
                                                case Colors.C_RED:
                                                    <p style="color: red">@item.Description</p>
                                                    break;
                                                case Colors.C_GREEN:
                                                    <p style="color: green">@item.Description</p>
                                                    break;
                                            }
                                            
                                        }
                                    </div>
                                </div>
                            }

                    </div>
                    }
            </div>
        </section>
        }
</main>
</body>

@code
{
    public List<Cosmetic> Items = null;

    public string Avatar { get; set; }
    public string Username { get; set; }

    public ItemType currentType { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!CheckForInternetConnection())
            throw new WebException("No internet connection");

        var currentUser = _discordRPCService.Client.CurrentUser;
        while (currentUser == null)
        {
            await Task.Delay(200);
            currentUser = _discordRPCService.Client.CurrentUser;
        }

        if (currentUser != null)
        {
            Avatar = currentUser.GetAvatarURL(User.AvatarFormat.PNG);
            Username = $"{currentUser.Username}#{currentUser.Discriminator}";
        }

        await base.OnInitializedAsync();
    }


    private async Task GetSaturnSkins()
    {
        Items = await _fortniteAPIService.GetSaturnSkins();
        currentType = ItemType.IT_Skin;
    }

    private async Task GetSaturnBackblings()
    {
        Items = await _fortniteAPIService.GetSaturnBackblings();
        currentType = ItemType.IT_Backbling;
    }

    private async Task GetSaturnEmotes()
    {
        Items = await _fortniteAPIService.GetSaturnDances();
        currentType = ItemType.IT_Dance;
    }

    // Taken from Darkblade on Twilight
    private static bool CheckForInternetConnection()
    {
        using var ping = new Ping();
        try
        {
            var reply = ping.Send("google.com", 5000);
            return reply.Status == IPStatus.Success;
        }
        catch
        {
            return false;
        }
    }
}